// ==UserScript==
// @name        Google AI Studio Enhancer
// @description Copy all AI chatbot responses and auto-click Run button for specified iterations
// @namespace   https://github.com/baturkacamak/userscripts
// @version     1.0.0
// @author      Batur Kacamak
// @license     MIT
// @homepage    https://github.com/baturkacamak/userscripts/tree/master/userscripts/google-ai-studio-enhancer#readme
// @homepageURL https://github.com/baturkacamak/userscripts/tree/master/userscripts/google-ai-studio-enhancer#readme
// @supportURL  https://github.com/baturkacamak/userscripts/issues
// @downloadURL https://github.com/baturkacamak/userscripts/raw/master/userscripts/google-ai-studio-enhancer/google-ai-studio-enhancer.user.js
// @updateURL   https://github.com/baturkacamak/userscripts/raw/master/userscripts/google-ai-studio-enhancer/google-ai-studio-enhancer.user.js
// @match       https://aistudio.google.com/*
// @icon        https://aistudio.google.com/static/favicon.ico
// @run-at      document-idle
// @grant       GM_setClipboard
// @grant       GM_getValue
// @grant       GM_setValue
// ==/UserScript==

// !!!!! ATTENTION !!!!!
// DO NOT EDIT THIS FILE DIRECTLY!
// This file is automatically generated from the source script.
// Any direct modifications will be overwritten during the next build.
// Please make your changes in the original source file.
//

(function () {
    'use strict';

    /**
     * Enhanced Logger - A feature-rich logging utility
     * Supports log levels, styling, grouping, caller info, filtering, persistence, exporting, and more
     */
    class Logger {
        static DEBUG = true;
        static PREFIX = "Userscript";
        static _customFormat = null;
        static _logHistory = [];
        static _filters = new Set();
        static _lastTimestamp = null;
        static _persist = false;
        static _mock = false;
        static _theme = {
            debug: "color: #3498db; font-weight: bold;",
            info: "color: #1abc9c; font-weight: bold;",
            warn: "color: #f39c12; font-weight: bold;",
            error: "color: #e74c3c; font-weight: bold;",
            success: "color: #2ecc71; font-weight: bold;",
            trace: "color: #8e44ad; font-weight: bold;",
            htmlTitle: "color: #9b59b6; font-weight: bold;",
            htmlContent: "color: #2c3e50;",
            toggle: "color: #f39c12; font-weight: bold;"
        };
        static _emojis = {
            debug: "\uD83D\uDC1B",
            info: "\u2139\uFE0F",
            warn: "\u26A0\uFE0F",
            error: "\u274C",
            success: "\u2705",
            trace: "\uD83D\uDCCC",
            html: "\uD83E\uDDE9",
            toggle: "\uD83C\uDF9B\uFE0F"
        };

        static setTimeFormat(locale = "en-US", use12Hour = false) {
            this._customFormat = {locale, hour12: use12Hour};
        }

        static _detectTimeFormat() {
            try {
                const testDate = new Date(Date.UTC(2020, 0, 1, 13, 0, 0));
                const locale = navigator.language || "tr-TR";
                const timeString = testDate.toLocaleTimeString(locale);
                const is12Hour = timeString.toLowerCase().includes("pm") || timeString.toLowerCase().includes("am");
                return {locale, hour12: is12Hour};
            } catch (e) {
                return {locale: "tr-TR", hour12: false};
            }
        }

        static _timestamp() {
            const now = new Date();

            const day = String(now.getDate()).padStart(2, '0');
            const month = String(now.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed
            const year = now.getFullYear();
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const seconds = String(now.getSeconds()).padStart(2, '0');
            const milliseconds = String(now.getMilliseconds()).padStart(3, '0');

            const time = `${day}/${month}/${year}, ${hours}:${minutes}:${seconds}.${milliseconds}`;

            let diff = "";
            if (this._lastTimestamp) {
                const ms = now - this._lastTimestamp;
                diff = ` [+${(ms / 1000).toFixed(3)}s]`; // Keep 3 decimal places for ms in diff
            }
            this._lastTimestamp = now;
            return `${time}${diff}`;
        }

        static _getCaller() {
            const err = new Error();
            const stack = err.stack?.split("\n")[3];
            return stack ? stack.trim() : "(unknown)";
        }

        static _log(level, ...args) {
            if (!this.DEBUG && level === "debug") return;
            if (this._filters.size && !args.some(arg => this._filters.has(arg))) return;
            const emoji = this._emojis[level] || '';
            const style = this._theme[level] || '';
            const timestamp = this._timestamp();
            const caller = this._getCaller();

            const message = [
                `%c${timestamp} %c${emoji} [${this.PREFIX} ${level.toUpperCase()}]%c:`,
                "color: gray; font-style: italic;",
                style,
                "color: inherit;",
                ...args,
                `\nCaller: ${caller}`
            ];

            this._logHistory.push({timestamp, level, args});

            if (this._persist) localStorage.setItem("LoggerHistory", JSON.stringify(this._logHistory));
            if (!this._mock) console.log(...message);
        }

        static debug(...args) {
            this._log("debug", ...args);
        }

        static info(...args) {
            this._log("info", ...args);
        }

        static warn(...args) {
            this._log("warn", ...args);
        }

        static error(...args) {
            this._log("error", ...args);
        }

        static success(...args) {
            this._log("success", ...args);
        }

        static trace(...args) {
            this._log("trace", ...args);
            console.trace();
        }

        static logHtml(title, htmlContent) {
            const shortContent = htmlContent.substring(0, 1500) + "...";
            this._log("html", `[${title}]`, shortContent);
            if (!this._mock) {
                console.groupCollapsed(`%c\uD83E\uDDE9 HTML Details (${title})`, this._theme.htmlTitle);
                console.log("%cComplete HTML:", this._theme.htmlTitle);
                console.log(`%c${htmlContent}`, this._theme.htmlContent);
                console.groupEnd();
            }
        }

        static setPrefix(prefix) {
            this.PREFIX = prefix;
        }

        static setTheme(theme) {
            Object.assign(this._theme, theme);
        }

        static addFilter(tag) {
            this._filters.add(tag);
        }

        static clearFilters() {
            this._filters.clear();
        }

        static persistLogs(enable = true) {
            this._persist = enable;
        }

        static mock(enable = true) {
            this._mock = enable;
        }

        static group(label) {
            if (!this._mock) console.group(label);
        }

        static groupEnd() {
            if (!this._mock) console.groupEnd();
        }

        static step(msg) {
            this.info(`\u2705 ${msg}`);
        }

        static hello() {
            this.info("Hello, dev! \uD83D\uDC4B Ready to debug?");
        }

        static downloadLogs(filename = "logs.json") {
            const blob = new Blob([JSON.stringify(this._logHistory, null, 2)], {type: 'application/json'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = filename;
            a.click();
            URL.revokeObjectURL(url);
        }

        static autoClear(intervalMs) {
            setInterval(() => {
                this._logHistory = [];
                if (this._persist) localStorage.removeItem("LoggerHistory");
            }, intervalMs);
        }
    }

    /**
     * HTMLUtils - Utilities for HTML manipulation
     * Provides functions for escaping HTML, encoding/decoding entities, etc.
     */
    class HTMLUtils {
        /**
         * Escape special HTML characters to prevent XSS
         * @param {string} str - The string to escape
         * @return {string} - The escaped string
         */
        static escapeHTML(str) {
            const escapeMap = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '\'': '&#39;',
                '"': '&quot;',
            };
            return str.replace(/[&<>'"]/g, (tag) => escapeMap[tag] || tag);
        }

        /**
         * Escape XML special characters
         * @param {string} str - The string to escape
         * @return {string} - The escaped string
         */
        static escapeXML(str) {
            return String(str)
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&apos;');
        }

        /**
         * Convert a plain text string to sanitized HTML
         * @param {string} text - The text to convert
         * @return {string} - HTML with line breaks and links
         */
        static textToHtml(text) {
            if (!text) return '';

            // First escape HTML
            let html = this.escapeHTML(text);

            // Convert line breaks to <br>
            html = html.replace(/\n/g, '<br>');

            // Convert URLs to links
            const urlRegex = /(https?:\/\/[^\s]+)/g;
            html = html.replace(urlRegex, (url) => `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`);

            return html;
        }

        /**
         * * Wait for a specific element to appear in the DOM.
         *  * Continues checking using requestAnimationFrame until it appears,
         *  * a timeout is reached, or the maximum number of attempts is exceeded.
         *  *
         *  * @param {string} selector - CSS selector of the target element.
         *  * @param {number} [timeout=10000] - Maximum time in milliseconds to wait.
         *  * @param {Document|Element} [root=document] - DOM root to query from.
         *  * @param {number} [maxRetries=60] - Maximum number of requestAnimationFrame attempts.
         *  * @returns {Promise<Element>} Resolves with the found element or rejects on timeout.
         */
        static waitForElement(selector, timeout = 10000, root = document, maxRetries = 60) {
            return new Promise((resolve, reject) => {
                const startTime = Date.now();
                let attempts = 0;

                function checkElement() {
                    const element = root.querySelector(selector);
                    if (element) {
                        resolve(element);
                        return;
                    }

                    if ((Date.now() - startTime > timeout) || (attempts >= maxRetries)) {
                        reject(new Error(`Timeout waiting for element: ${selector}`));
                        return;
                    }

                    attempts++;
                    requestAnimationFrame(checkElement);
                }

                checkElement();
            });
        }

        static decodeHtmlEntities(encodedString) {
            if (!encodedString || typeof encodedString !== 'string') return encodedString;
            const textarea = document.createElement('textarea');
            textarea.innerHTML = encodedString;
            return textarea.value;
        }

        static extractMetaTags(html) {
            if (!html) return {};

            const metaTags = {};
            const regex = /<meta\s+(?:property|name)=["']([^"']+)["']\s+content=["']([^"']+)["']/gi;

            let match;
            while (match = regex.exec(html)) {
                if (match[1] && match[2]) {
                    metaTags[match[1]] = this.decodeHtmlEntities(match[2]);
                }
            }

            return metaTags;
        }
    }

    /**
     * StyleManager - Utility for CSS style management
     * Handles adding and removing styles, theme variables, etc.
     */
    class StyleManager {
        static styleElements = new Map();

        /**
         * Add CSS styles to the document
         * @param {string} css - CSS string to add
         * @param {string} id - Optional ID for the style element
         * @returns {HTMLStyleElement} - The created style element
         */
        static addStyles(css, id = null) {
            const style = document.createElement('style');
            style.textContent = css;

            if (id) {
                style.id = id;
                // Remove any existing style with the same ID
                if (this.styleElements.has(id)) {
                    this.removeStyles(id);
                }
                this.styleElements.set(id, style);
            }

            document.head.appendChild(style);
            return style;
        }

        /**
         * Remove styles by ID
         * @param {string} id - ID of the style element to remove
         * @returns {boolean} - True if styles were removed, false otherwise
         */
        static removeStyles(id) {
            if (!this.styleElements.has(id)) return false;

            const styleElement = this.styleElements.get(id);
            if (styleElement && styleElement.parentNode) {
                styleElement.parentNode.removeChild(styleElement);
            }

            this.styleElements.delete(id);
            return true;
        }

        /**
         * Apply CSS variables for theming
         * @param {Object} variables - Object with variable names and values
         * @param {string} selector - CSS selector to apply variables to (default: :root)
         */
        static applyThemeVariables(variables, selector = ':root') {
            let css = `${selector} {\n`;

            Object.entries(variables).forEach(([name, value]) => {
                // Ensure variable names start with --
                const varName = name.startsWith('--') ? name : `--${name}`;
                css += `  ${varName}: ${value};\n`;
            });

            css += `}\n`;

            this.addStyles(css, 'theme-variables');
        }

        /**
         * Add styles to handle animations
         * @param {Object} animations - Key-value pairs of animation name and keyframes
         */
        static addAnimations(animations) {
            let css = '';

            Object.entries(animations).forEach(([name, keyframes]) => {
                css += `@keyframes ${name} {\n${keyframes}\n}\n\n`;
            });

            this.addStyles(css, 'animations');
        }
    }

    /**
     * GMFunctions - Provides fallback implementations for Greasemonkey/Tampermonkey functions
     * Ensures compatibility across different userscript managers and direct browser execution
     */

    class GMFunctions {
        /**
         * Check if we're running in development mode (outside a userscript manager)
         * @return {boolean} True if in development environment
         */
        static isDevelopmentMode() {
            // In production, GM_info should be defined by the userscript manager
            return 'undefined' === typeof GM_info;
        }

        /**
         * Initialize fallbacks for missing GM functions
         * @return {Object} Object containing references to all GM functions (either native or polyfilled)
         */
        static initialize() {
            const isDevMode = this.isDevelopmentMode();

            Logger.debug('GMFunctions initializing', isDevMode ? 'in development mode' : 'in production mode');

            if (isDevMode) {
                // Create fallbacks for common GM functions
                this.setupAddStyle();
                this.setupXmlHttpRequest();
                this.setupSetClipboard();
                this.setupDownload();
                this.setupGetValue();
                this.setupSetValue();

                Logger.info('GM function fallbacks have been created for development mode');
            } else {
                Logger.debug('Using native userscript manager GM functions');
            }

            // Return references to all functions (either native or polyfilled)
            return {
                GM_addStyle: window.GM_addStyle,
                GM_xmlhttpRequest: window.GM_xmlhttpRequest,
                GM_setClipboard: window.GM_setClipboard,
                GM_download: window.GM_download,
                GM_getValue: window.GM_getValue,
                GM_setValue: window.GM_setValue,
            };
        }

        /**
         * Set up GM_addStyle fallback
         */
        static setupAddStyle() {
            window.GM_addStyle = function (css) {
                Logger.debug('GM_addStyle fallback executing', css.substring(0, 50) + '...');
                const style = document.createElement('style');
                style.textContent = css;
                document.head.appendChild(style);
                return style;
            };
        }

        /**
         * Set up GM_xmlhttpRequest fallback
         */
        static setupXmlHttpRequest() {
            window.GM_xmlhttpRequest = function (details) {
                Logger.debug('GM_xmlhttpRequest fallback executing', {
                    method: details.method,
                    url: details.url
                });

                const xhr = new XMLHttpRequest();
                xhr.open(details.method, details.url);

                if (details.headers) {
                    Object.keys(details.headers).forEach((key) => {
                        xhr.setRequestHeader(key, details.headers[key]);
                    });
                }

                xhr.onload = function () {
                    if (details.onload) {
                        const response = {
                            responseText: xhr.responseText,
                            response: xhr.response,
                            status: xhr.status,
                            statusText: xhr.statusText,
                            readyState: xhr.readyState,
                        };

                        Logger.debug('GM_xmlhttpRequest completed', {
                            status: xhr.status,
                            url: details.url
                        });

                        details.onload(response);
                    }
                };

                xhr.onerror = function () {
                    Logger.error('GM_xmlhttpRequest error', {
                        url: details.url,
                        status: xhr.status
                    });

                    if (details.onerror) {
                        details.onerror(xhr);
                    }
                };

                xhr.send(details.data);
                return xhr;
            };
        }

        /**
         * Set up GM_setClipboard fallback
         */
        static setupSetClipboard() {
            window.GM_setClipboard = function (text) {
                Logger.debug('GM_setClipboard fallback executing', {
                    textLength: text.length
                });

                // Create a temporary textarea element
                const textarea = document.createElement('textarea');
                textarea.value = text;

                // Make the textarea not visible
                textarea.style.position = 'fixed';
                textarea.style.opacity = '0';

                document.body.appendChild(textarea);
                textarea.select();

                // Try to copy the text
                let success = false;
                try {
                    success = document.execCommand('copy');
                    Logger.info('Clipboard copy ' + (success ? 'successful' : 'unsuccessful'));
                } catch (err) {
                    Logger.error(err, 'Error copying to clipboard');
                }

                // Clean up
                document.body.removeChild(textarea);
                return success;
            };
        }

        /**
         * Set up GM_download fallback
         */
        static setupDownload() {
            window.GM_download = function (options) {
                // Wrapping in a Promise to allow for async-like behavior if needed by caller,
                // though current implementation is synchronous.
                return new Promise((resolve, reject) => {
                    try {
                        const {url, name, onload, onerror} = options;

                        Logger.debug('GM_download fallback executing', {
                            url: url.substring(0, 100),
                            filename: name
                        });

                        // Create download link
                        const downloadLink = document.createElement('a');
                        downloadLink.href = url;
                        downloadLink.download = name || 'download';
                        downloadLink.style.display = 'none';

                        // Add to document, click, and remove
                        document.body.appendChild(downloadLink);
                        downloadLink.click();

                        // Clean up
                        setTimeout(() => {
                            document.body.removeChild(downloadLink);
                            if (onload) {
                                Logger.debug('GM_download completed successfully');
                                onload();
                            }
                            resolve(true); // Resolve promise on success
                        }, 100);

                    } catch (err) {
                        Logger.error(err, 'Error downloading file');
                        if (options.onerror) options.onerror(err);
                        reject(err); // Reject promise on error
                    }
                });
            };
        }

        /**
         * Set up GM_getValue fallback using localStorage, returning a Promise.
         */
        static setupGetValue() {
            window.GM_getValue = function (key, defaultValue) {
                return new Promise((resolve) => {
                    try {
                        const storageKey = `GM_${key}`;
                        Logger.debug('GM_getValue fallback: Attempting to get \'' + storageKey + '\'');
                        const value = localStorage.getItem(storageKey);
                        if (value !== null) {
                            try {
                                const parsedValue = JSON.parse(value);
                                Logger.debug('GM_getValue fallback: Found and parsed \'' + storageKey + '\', value:', parsedValue);
                                resolve(parsedValue);
                            } catch (e) {
                                Logger.debug('GM_getValue fallback: Found non-JSON \'' + storageKey + '\', value:', value);
                                resolve(value); // Return as string if not JSON
                            }
                        } else {
                            Logger.debug('GM_getValue fallback: Key \'' + storageKey + '\' not found, returning default:', defaultValue);
                            resolve(defaultValue);
                        }
                    } catch (error) {
                        Logger.error(error, 'Error getting value for key (GM_getValue fallback): ' + key);
                        resolve(defaultValue);
                    }
                });
            };
        }

        /**
         * Set up GM_setValue fallback using localStorage, returning a Promise.
         */
        static setupSetValue() {
            window.GM_setValue = function (key, value) {
                return new Promise((resolve, reject) => {
                    try {
                        const storageKey = `GM_${key}`;
                        Logger.debug('GM_setValue fallback: Attempting to set \'' + storageKey + '\' to:', value);
                        localStorage.setItem(storageKey, JSON.stringify(value));
                        resolve();
                    } catch (error) {
                        Logger.error(error, 'Error setting value for key (GM_setValue fallback): ' + key);
                        reject(error);
                    }
                });
            };
        }
    }

    // Initialize the fallbacks (this will populate window.GM_getValue etc.)
    // The initialize method also returns the map of functions.
    const gmFunctions = GMFunctions.initialize();

    // Export the functions for direct import, matching the names used in CountryFilter.js
    gmFunctions.GM_addStyle;
    gmFunctions.GM_xmlhttpRequest;
    const GM_setClipboard = gmFunctions.GM_setClipboard;
    gmFunctions.GM_download;
    const getValue = gmFunctions.GM_getValue; // Maps to getValue for import { getValue }
    const setValue = gmFunctions.GM_setValue; // Maps to setValue for import { setValue }

    // For potential direct class usage if ever needed, though current pattern is to use the initialized functions.
    // export default GMFunctions; // Not currently used this way

    /**
     * PubSub - A simple publish/subscribe pattern implementation
     * Enables components to communicate without direct references
     */
    class PubSub {
        static #events = {};

        /**
         * Subscribe to an event
         * @param {string} event - Event name
         * @param {Function} callback - Callback function
         * @return {string} Subscription ID
         */
        static subscribe(event, callback) {
            if (!this.#events[event]) {
                this.#events[event] = [];
            }

            const subscriptionId = `${event}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
            this.#events[event].push({callback, subscriptionId});
            return subscriptionId;
        }

        /**
         * Unsubscribe from an event
         * @param {string} subscriptionId - Subscription ID
         * @return {boolean} Success state
         */
        static unsubscribe(subscriptionId) {
            for (const event in this.#events) {
                const index = this.#events[event].findIndex(sub => sub.subscriptionId === subscriptionId);
                if (index !== -1) {
                    this.#events[event].splice(index, 1);
                    return true;
                }
            }
            return false;
        }

        /**
         * Publish an event
         * @param {string} event - Event name
         * @param {any} data - Data to pass to subscribers
         */
        static publish(event, data) {
            if (!this.#events[event]) {
                return;
            }

            this.#events[event].forEach(sub => {
                sub.callback(data);
            });
        }

        /**
         * Clear all subscriptions
         * @param {string} [event] - Optional event name to clear only specific event
         */
        static clear(event) {
            if (event) {
                delete this.#events[event];
            } else {
                this.#events = {};
            }
        }
    }

    class UrlChangeWatcher {
      constructor(strategies = [], fireImmediately = true) {
        this.strategies = strategies;
        this.fireImmediately = fireImmediately;
        this.lastUrl = location.href;
        this.active = false;
      }

      start() {
        if (this.active) return;
        this.active = true;
        Logger.debug('UrlChangeWatcher (Strategy) started');

        this.strategies.forEach((strategy) =>
          strategy.start?.(this._handleChange.bind(this)),
        );

        if (this.fireImmediately) {
          this._handleChange(location.href, null, true);
        }
      }

      stop() {
        this.active = false;
        this.strategies.forEach((strategy) => strategy.stop?.());
        Logger.debug('UrlChangeWatcher (Strategy) stopped');
      }

      _handleChange(newUrl, oldUrl = this.lastUrl, force = false) {
        if (!force && newUrl === this.lastUrl) return;
        Logger.debug(`URL changed: ${oldUrl} → ${newUrl}`);

        this.lastUrl = newUrl;

        if (PubSub?.publish) {
          PubSub.publish('urlchange', {newUrl, oldUrl});
        }
      }
    }

    /**
     * DOMObserver - Observes DOM changes and URL changes
     * Uses UrlChangeWatcher for URL change detection with configurable strategies
     */
    class DOMObserver {
      /**
         * Wait for elements matching a selector
         * @param {string} selector - CSS selector to wait for
         * @param {number} timeout - Timeout in milliseconds
         * @return {Promise<NodeList>} - Promise resolving to found elements
         */
      static waitForElements(selector, timeout = 10000) {
        return new Promise((resolve, reject) => {
          const startTime = Date.now();

          function checkElements() {
            const elements = document.querySelectorAll(selector);
            if (0 < elements.length) {
              resolve(elements);
              return;
            }

            if (Date.now() - startTime > timeout) {
              reject(new Error(`Timeout waiting for elements: ${selector}`));
              return;
            }

            requestAnimationFrame(checkElements);
          }

          checkElements();
        });
      }
      /**
         * Create a new DOMObserver
         * @param {Function} onMutation - Callback for handling mutations
         * @param {Array} urlChangeStrategies - Array of URL change detection strategies to use
         */
      constructor(onMutation, urlChangeStrategies = []) {
        this.observer = new MutationObserver(this.handleMutations.bind(this));
        this.lastUrl = location.href;
        this.onMutation = onMutation;

        // Initialize URL change watcher with provided strategies
        this.urlChangeWatcher = new UrlChangeWatcher(urlChangeStrategies, false); // false = don't fire immediately
      }


      /**
         * Start observing DOM changes and URL changes
         * @param {HTMLElement} target - Element to observe (defaults to document.body)
         * @param {Object} config - MutationObserver configuration (defaults to sensible values)
         */
      observe(target = document.body, config = {childList: true, subtree: true}) {
        this.observer.observe(target, config);

        // Start URL change watcher
        this.urlChangeWatcher.start();
      }

      /**
         * Stop observing DOM changes and URL changes
         */
      disconnect() {
        this.observer.disconnect();

        // Stop URL change watcher
        this.urlChangeWatcher.stop();
      }

      /**
         * Handle mutations
         * @param {MutationRecord[]} mutations - Array of mutation records
         * @private
         */
      handleMutations(mutations) {
        if (this.onMutation) {
          this.onMutation(mutations);
        }
      }
    }

    /**
     * Button - A reusable UI component for buttons.
     * Creates customizable, accessible buttons with various states and callbacks.
     */

    /**
     * A reusable UI component for creating accessible, customizable buttons.
     */
    class Button {
      /**
         * Returns the unique base CSS class for the Button component.
         * This class is used as the root for all styling and helps prevent CSS collisions.
         *
         * @return {string} The base CSS class name for buttons.
         */
      static get BASE_BUTTON_CLASS() {
        return 'userscripts-button';
      }
      /**
         * Returns the CSS variable prefix used for theming and styling the Button component.
         * This prefix scopes all custom CSS variables (e.g., colors, borders) related to the button.
         *
         * @return {string} The CSS variable prefix.
         */
      static get CSS_VAR_PREFIX() {
        return '--userscripts-button-';
      }
      /**
         * Initialize styles for all buttons.
         * These styles reference the CSS variables with our defined prefix.
         */
      static initStyles() {
        if (Button.stylesInitialized) return;
        StyleManager.addStyles(`
      /* Scoped styles for Userscripts Button Component */
      .${Button.BASE_BUTTON_CLASS} {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-family: inherit;
        font-weight: 500;
        border-radius: 0.375rem;
        border: 1px solid transparent;
        cursor: pointer;
        transition: all 0.15s ease-in-out;
        text-align: center;
        background-color: var(${Button.CSS_VAR_PREFIX}bg);
        color: var(${Button.CSS_VAR_PREFIX}color);
        border-color: var(${Button.CSS_VAR_PREFIX}border);
      }
      
      /* Button sizes */
      .${Button.BASE_BUTTON_CLASS}--small {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        min-height: 1.75rem;
      }
      .${Button.BASE_BUTTON_CLASS}--medium {
        font-size: 0.875rem;
        padding: 0.5rem 1rem;
        min-height: 2.25rem;
      }
      .${Button.BASE_BUTTON_CLASS}--large {
        font-size: 1rem;
        padding: 0.75rem 1.5rem;
        min-height: 2.75rem;
      }
      
      /* Button themes using CSS variables */
      .${Button.BASE_BUTTON_CLASS}--default {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-default);
        color: var(${Button.CSS_VAR_PREFIX}color-default);
        border-color: var(${Button.CSS_VAR_PREFIX}border-default);
      }
      .${Button.BASE_BUTTON_CLASS}--default:hover:not(:disabled) {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-default-hover);
      }
      
      .${Button.BASE_BUTTON_CLASS}--primary {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-primary);
        color: var(${Button.CSS_VAR_PREFIX}color-primary);
        border-color: var(${Button.CSS_VAR_PREFIX}border-primary);
      }
      .${Button.BASE_BUTTON_CLASS}--primary:hover:not(:disabled) {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-primary-hover);
        border-color: var(${Button.CSS_VAR_PREFIX}border-primary-hover);
      }
      
      .${Button.BASE_BUTTON_CLASS}--secondary {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-secondary);
        color: var(${Button.CSS_VAR_PREFIX}color-secondary);
        border-color: var(${Button.CSS_VAR_PREFIX}border-secondary);
      }
      .${Button.BASE_BUTTON_CLASS}--secondary:hover:not(:disabled) {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-secondary-hover);
        border-color: var(${Button.CSS_VAR_PREFIX}border-secondary-hover);
      }
      
      .${Button.BASE_BUTTON_CLASS}--success {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-success);
        color: var(${Button.CSS_VAR_PREFIX}color-success);
        border-color: var(${Button.CSS_VAR_PREFIX}border-success);
      }
      .${Button.BASE_BUTTON_CLASS}--success:hover:not(:disabled) {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-success-hover);
        border-color: var(${Button.CSS_VAR_PREFIX}border-success-hover);
      }
      
      .${Button.BASE_BUTTON_CLASS}--danger {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-danger);
        color: var(${Button.CSS_VAR_PREFIX}color-danger);
        border-color: var(${Button.CSS_VAR_PREFIX}border-danger);
      }
      .${Button.BASE_BUTTON_CLASS}--danger:hover:not(:disabled) {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-danger-hover);
        border-color: var(${Button.CSS_VAR_PREFIX}border-danger-hover);
      }
      
      /* Generic state styles */
      .${Button.BASE_BUTTON_CLASS}:disabled {
        opacity: 0.65;
        cursor: not-allowed;
        pointer-events: none;
      }
      .${Button.BASE_BUTTON_CLASS}:focus {
        outline: none;
        box-shadow: 0 0 0 3px var(${Button.CSS_VAR_PREFIX}focus-shadow);
      }
      
      /* Generic pseudo-class rules */
      .${Button.BASE_BUTTON_CLASS}:hover:not(:disabled) {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-hover);
      }
      .${Button.BASE_BUTTON_CLASS}:active:not(:disabled) {
        background-color: var(${Button.CSS_VAR_PREFIX}bg-active);
      }
      
      /* Button content */
      .${Button.BASE_BUTTON_CLASS}__icon {
        display: inline-flex;
        margin-right: 0.5rem;
      }
      .${Button.BASE_BUTTON_CLASS}__text {
        display: inline-block;
      }
    `, 'userscripts-button-styles');

        Button.stylesInitialized = true;
      }
      /**
         * Inject default color variables for the button component into the :root.
         * Users can call this method to automatically set a default color palette.
         */
      static useDefaultColors() {
        const styleId = 'userscripts-button-default-colors';
        if (!document.getElementById(styleId)) {
          const style = document.createElement('style');
          style.id = styleId;
          style.innerHTML = `
        :root {
          ${Button.CSS_VAR_PREFIX}bg-default: #f3f4f6;
          ${Button.CSS_VAR_PREFIX}color-default: #374151;
          ${Button.CSS_VAR_PREFIX}border-default: #d1d5db;
          ${Button.CSS_VAR_PREFIX}bg-default-hover: #e5e7eb;
          
          ${Button.CSS_VAR_PREFIX}bg-primary: #3b82f6;
          ${Button.CSS_VAR_PREFIX}color-primary: #ffffff;
          ${Button.CSS_VAR_PREFIX}border-primary: #3b82f6;
          ${Button.CSS_VAR_PREFIX}bg-primary-hover: #2563eb;
          ${Button.CSS_VAR_PREFIX}border-primary-hover: #2563eb;
          
          ${Button.CSS_VAR_PREFIX}bg-secondary: #6b7280;
          ${Button.CSS_VAR_PREFIX}color-secondary: #ffffff;
          ${Button.CSS_VAR_PREFIX}border-secondary: #6b7280;
          ${Button.CSS_VAR_PREFIX}bg-secondary-hover: #4b5563;
          ${Button.CSS_VAR_PREFIX}border-secondary-hover: #4b5563;
          
          ${Button.CSS_VAR_PREFIX}bg-success: #10b981;
          ${Button.CSS_VAR_PREFIX}color-success: #ffffff;
          ${Button.CSS_VAR_PREFIX}border-success: #10b981;
          ${Button.CSS_VAR_PREFIX}bg-success-hover: #059669;
          ${Button.CSS_VAR_PREFIX}border-success-hover: #059669;
          
          ${Button.CSS_VAR_PREFIX}bg-danger: #ef4444;
          ${Button.CSS_VAR_PREFIX}color-danger: #ffffff;
          ${Button.CSS_VAR_PREFIX}border-danger: #ef4444;
          ${Button.CSS_VAR_PREFIX}bg-danger-hover: #dc2626;
          ${Button.CSS_VAR_PREFIX}border-danger-hover: #dc2626;
          
          ${Button.CSS_VAR_PREFIX}bg-hover: #e0e0e0;
          ${Button.CSS_VAR_PREFIX}bg-active: #d0d0d0;
          
          ${Button.CSS_VAR_PREFIX}focus-shadow: rgba(59, 130, 246, 0.3);
        }
      `;
          document.head.appendChild(style);
        }
      }
      /**
         * Create a new Button.
         * @param {Object} options - Configuration options.
         * @param {String} options.text - Button text.
         * @param {String} [options.type="button"] - Button type.
         * @param {String} [options.className] - Additional custom CSS class.
         * @param {Function} options.onClick - Click event handler.
         * @param {String} [options.id] - Button ID.
         * @param {HTMLElement} [options.container] - Container to append the button to.
         * @param {Object} [options.attributes={}] - Additional HTML attributes.
         * @param {String} [options.theme="default"] - Button theme.
         * @param {String} [options.size="medium"] - Button size.
         * @param {Boolean} [options.disabled=false] - Disabled state.
         * @param {String} [options.icon] - Optional icon HTML.
         * @param {String} [options.successText] - Success state text.
         * @param {Number} [options.successDuration=1500] - Success state duration (ms).
         */
      constructor(options) {
        this.text = options.text || '';
        this.type = options.type || 'button';
        this.customClassName = options.className || '';
        this.onClick = options.onClick;
        this.id = options.id;
        this.container = options.container;
        this.attributes = options.attributes || {};
        this.theme = options.theme;
        this.size = options.size || 'medium';
        this.disabled = options.disabled || false;
        this.icon = options.icon || null;
        this.successText = options.successText || null;
        this.successDuration = options.successDuration || 1500;
        this.originalText = this.text;

        // These properties will refer to the DOM elements.
        this.button = null;
        this.textElement = null;

        Button.initStyles();
        this.create();
      }


      /**
         * Create the button element and, if a container is provided, append it.
         * @return {HTMLButtonElement} The created button element.
         */
      create() {
        this.button = document.createElement('button');
        this.button.type = this.type;
        this.button.disabled = this.disabled;
        if (this.id) this.button.id = this.id;
        this.button._buttonInstance = this;
        this.updateButtonClasses();
        this.updateContent();
        if (this.onClick) this.button.addEventListener('click', (e) => this.handleClick(e));
        Object.entries(this.attributes).forEach(([key, value]) => {
          this.button.setAttribute(key, value);
        });
        if (this.container) this.container.appendChild(this.button);
        return this.button;
      }

      /**
         * Update the classes on the button element based on theme, size, and custom classes.
         */
      updateButtonClasses() {
        const classNames = [Button.BASE_BUTTON_CLASS];
        classNames.push(`${Button.BASE_BUTTON_CLASS}--${this.theme}`);
        classNames.push(`${Button.BASE_BUTTON_CLASS}--${this.size}`);
        if (this.customClassName) classNames.push(this.customClassName);
        this.button.className = classNames.join(' ');
      }

      /**
         * Update the button content (icon and text).
         */
      updateContent() {
        this.button.innerHTML = '';
        if (this.icon) {
          const iconSpan = document.createElement('span');
          iconSpan.className = `${Button.BASE_BUTTON_CLASS}__icon`;
          iconSpan.innerHTML = this.icon;
          this.button.appendChild(iconSpan);
        }
        this.textElement = document.createElement('span');
        this.textElement.className = `${Button.BASE_BUTTON_CLASS}__text`;
        this.textElement.textContent = this.text;
        this.button.appendChild(this.textElement);
      }

      /**
         * Handle click events on the button.
         * @param {Event} e - The click event.
         */
      handleClick(e) {
        if (this.disabled) return;
        const result = this.onClick(e);
        if (this.successText && false !== result) {
          this.showSuccessState();
        }
      }

      /**
         * Show a success state by temporarily changing the button's text and theme.
         */
      showSuccessState() {
        const originalText = this.text;
        const originalTheme = this.theme;
        this.setText(this.successText);
        this.setTheme('success');
        setTimeout(() => {
          this.setText(originalText);
          this.setTheme(originalTheme);
        }, this.successDuration);
      }

      /**
         * Set the button's text.
         * @param {String} text - The new text to display.
         */
      setText(text) {
        this.text = text;
        if (this.textElement) {
          this.textElement.textContent = text;
        } else {
          this.updateContent();
        }
      }

      /**
         * Reset the button's text to its original value.
         */
      resetText() {
        this.setText(this.originalText);
      }

      /**
         * Set an icon for the button.
         * @param {String} iconHtml - The HTML string for the icon.
         */
      setIcon(iconHtml) {
        this.icon = iconHtml;
        this.updateContent();
      }

      /**
         * Enable or disable the button.
         * @param {Boolean} disabled - Whether the button should be disabled.
         */
      setDisabled(disabled) {
        this.disabled = disabled;
        this.button.disabled = disabled;
      }

      /**
         * Toggle the disabled state of the button.
         * @return {Boolean} The new disabled state.
         */
      toggleDisabled() {
        this.setDisabled(!this.disabled);
        return this.disabled;
      }

      /**
         * Change the button's theme.
         * @param {String} theme - The new theme (e.g., "default", "primary", etc.).
         */
      setTheme(theme) {
        this.button.classList.remove(`${Button.BASE_BUTTON_CLASS}--${this.theme}`);
        this.theme = theme;
        this.button.classList.add(`${Button.BASE_BUTTON_CLASS}--${this.theme}`);
      }

      /**
         * Change the button's size.
         * @param {String} size - The new size (e.g., "small", "medium", "large").
         */
      setSize(size) {
        this.button.classList.remove(`${Button.BASE_BUTTON_CLASS}--${this.size}`);
        this.size = size;
        this.button.classList.add(`${Button.BASE_BUTTON_CLASS}--${this.size}`);
      }

      /**
         * Apply a custom CSS class to the button.
         * @param {String} className - The custom class name.
         */
      setCustomClass(className) {
        if (this.customClassName) {
          this.button.classList.remove(this.customClassName);
        }
        this.customClassName = className;
        if (className) {
          this.button.classList.add(className);
        }
      }
    }

    // Static property to track if styles have been initialized.
    Button.stylesInitialized = false;
    Button.initStyles();

    /**
     * Enhanced version of the ProgressBar core component with Eksi-style UI
     * This replaces the existing ProgressBar.js file in the core/ui directory
     */

    class ProgressBar {
      /**
         * Returns the unique base CSS class for the ProgressBar component.
         * This class is used as the root for all styling and helps prevent CSS collisions.
         *
         * @return {string} The base CSS class name for progress bars.
         */
      static get BASE_PROGRESS_CLASS() {
        return 'userscripts-progress';
      }
      /**
         * Returns the CSS variable prefix used for theming the ProgressBar component.
         * This prefix scopes all custom CSS variables (e.g., colors) related to the progress bar.
         *
         * @return {string} The CSS variable prefix.
         */
      static get CSS_VAR_PREFIX() {
        return '--userscripts-progress-';
      }
      /**
         * Initialize styles for all progress bars.
         * These styles reference the CSS variables with our defined prefix.
         */
      static initStyles() {
        if (ProgressBar.stylesInitialized) return;
        StyleManager.addStyles(`
      /* Scoped styles for Userscripts ProgressBar Component */
      .${ProgressBar.BASE_PROGRESS_CLASS} {
        width: 100%;
        margin: 10px 0;
        position: relative;
      }
      
      .${ProgressBar.BASE_PROGRESS_CLASS}-label {
        font-size: 0.875rem;
        margin-bottom: 4px;
        display: block;
        color: var(${ProgressBar.CSS_VAR_PREFIX}label-color, #555);
      }
      
      .${ProgressBar.BASE_PROGRESS_CLASS}-bar {
        height: 20px;
        background-color: var(${ProgressBar.CSS_VAR_PREFIX}bar-bg, #f3f3f3);
        border-radius: 10px;
        overflow: hidden;
        position: relative;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      
      .${ProgressBar.BASE_PROGRESS_CLASS}-fill {
        height: 100%;
        width: 0%;
        border-radius: 10px;
        transition: width 0.5s ease;
        background: linear-gradient(90deg, 
          var(${ProgressBar.CSS_VAR_PREFIX}fill-gradient-start, var(${ProgressBar.CSS_VAR_PREFIX}fill-bg)), 
          var(${ProgressBar.CSS_VAR_PREFIX}fill-gradient-end, var(${ProgressBar.CSS_VAR_PREFIX}fill-bg))
        );
        position: relative;
        overflow: hidden;
      }
      
      .${ProgressBar.BASE_PROGRESS_CLASS}-fill::after {
        content: '';
        position: absolute;
        inset: 0;
        background: linear-gradient(
          90deg,
          rgba(255, 255, 255, 0.1) 25%,
          transparent 25%,
          transparent 50%,
          rgba(255, 255, 255, 0.1) 50%,
          rgba(255, 255, 255, 0.1) 75%,
          transparent 75%,
          transparent 100%
        );
        background-size: 30px 30px;
        animation: ${ProgressBar.BASE_PROGRESS_CLASS}-stripes 1s linear infinite;
      }
      
      @keyframes ${ProgressBar.BASE_PROGRESS_CLASS}-stripes {
        0% {
          background-position: 0 0;
        }
        100% {
          background-position: 30px 0;
        }
      }
      
      .${ProgressBar.BASE_PROGRESS_CLASS}-text {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        align-items: center;
        justify-content: flex-end;
        padding-right: 10px;
        font-size: 0.75rem;
        color: var(${ProgressBar.CSS_VAR_PREFIX}text-color, #333);
        font-weight: bold;
        text-shadow: 0 1px 1px rgba(255, 255, 255, 0.7);
        z-index: 1;
      }
      
      /* Themes */
      .${ProgressBar.BASE_PROGRESS_CLASS}--default .${ProgressBar.BASE_PROGRESS_CLASS}-fill {
        background: linear-gradient(90deg, 
          var(${ProgressBar.CSS_VAR_PREFIX}default-fill-gradient-start, var(${ProgressBar.CSS_VAR_PREFIX}default-fill-bg)),
          var(${ProgressBar.CSS_VAR_PREFIX}default-fill-gradient-end, var(${ProgressBar.CSS_VAR_PREFIX}default-fill-bg))
        );
      }
      
      .${ProgressBar.BASE_PROGRESS_CLASS}--primary .${ProgressBar.BASE_PROGRESS_CLASS}-fill {
        background: linear-gradient(90deg, 
          var(${ProgressBar.CSS_VAR_PREFIX}primary-fill-gradient-start, var(${ProgressBar.CSS_VAR_PREFIX}primary-fill-bg)),
          var(${ProgressBar.CSS_VAR_PREFIX}primary-fill-gradient-end, var(${ProgressBar.CSS_VAR_PREFIX}primary-fill-bg))
        );
      }
      
      .${ProgressBar.BASE_PROGRESS_CLASS}--success .${ProgressBar.BASE_PROGRESS_CLASS}-fill {
        background: linear-gradient(90deg, 
          var(${ProgressBar.CSS_VAR_PREFIX}success-fill-gradient-start, var(${ProgressBar.CSS_VAR_PREFIX}success-fill-bg)),
          var(${ProgressBar.CSS_VAR_PREFIX}success-fill-gradient-end, var(${ProgressBar.CSS_VAR_PREFIX}success-fill-bg))
        );
      }
      
      .${ProgressBar.BASE_PROGRESS_CLASS}--danger .${ProgressBar.BASE_PROGRESS_CLASS}-fill {
        background: linear-gradient(90deg, 
          var(${ProgressBar.CSS_VAR_PREFIX}danger-fill-gradient-start, var(${ProgressBar.CSS_VAR_PREFIX}danger-fill-bg)),
          var(${ProgressBar.CSS_VAR_PREFIX}danger-fill-gradient-end, var(${ProgressBar.CSS_VAR_PREFIX}danger-fill-bg))
        );
      }
      
      .${ProgressBar.BASE_PROGRESS_CLASS}--warning .${ProgressBar.BASE_PROGRESS_CLASS}-fill {
        background: linear-gradient(90deg, 
          var(${ProgressBar.CSS_VAR_PREFIX}warning-fill-gradient-start, var(${ProgressBar.CSS_VAR_PREFIX}warning-fill-bg)),
          var(${ProgressBar.CSS_VAR_PREFIX}warning-fill-gradient-end, var(${ProgressBar.CSS_VAR_PREFIX}warning-fill-bg))
        );
      }
      
      /* Sizes */
      .${ProgressBar.BASE_PROGRESS_CLASS}--small .${ProgressBar.BASE_PROGRESS_CLASS}-bar {
        height: 8px;
      }
      
      .${ProgressBar.BASE_PROGRESS_CLASS}--large .${ProgressBar.BASE_PROGRESS_CLASS}-bar {
        height: 24px;
      }
    `, 'userscripts-progress-styles');
        ProgressBar.stylesInitialized = true;
      }
      /**
         * Injects default color variables for the ProgressBar component into the :root.
         * Users can call this method to automatically set a default color palette.
         */
      static useDefaultColors() {
        const styleId = 'userscripts-progress-default-colors';
        if (!document.getElementById(styleId)) {
          const style = document.createElement('style');
          style.id = styleId;
          style.innerHTML = `
        :root {
          /* Base colors */
          ${ProgressBar.CSS_VAR_PREFIX}label-color: #555;
          ${ProgressBar.CSS_VAR_PREFIX}bar-bg: #f3f3f3;
          ${ProgressBar.CSS_VAR_PREFIX}fill-bg: #6b7280;
          ${ProgressBar.CSS_VAR_PREFIX}text-color: #333;
          
          /* Theme colors with gradients */
          ${ProgressBar.CSS_VAR_PREFIX}default-fill-bg: #6b7280;
          ${ProgressBar.CSS_VAR_PREFIX}default-fill-gradient-start: #6b7280;
          ${ProgressBar.CSS_VAR_PREFIX}default-fill-gradient-end: #4b5563;
          
          ${ProgressBar.CSS_VAR_PREFIX}primary-fill-bg: #3b82f6;
          ${ProgressBar.CSS_VAR_PREFIX}primary-fill-gradient-start: #3b82f6;
          ${ProgressBar.CSS_VAR_PREFIX}primary-fill-gradient-end: #2563eb;
          
          ${ProgressBar.CSS_VAR_PREFIX}success-fill-bg: #10b981;
          ${ProgressBar.CSS_VAR_PREFIX}success-fill-gradient-start: #10b981;
          ${ProgressBar.CSS_VAR_PREFIX}success-fill-gradient-end: #059669;
          
          ${ProgressBar.CSS_VAR_PREFIX}danger-fill-bg: #ef4444;
          ${ProgressBar.CSS_VAR_PREFIX}danger-fill-gradient-start: #ef4444;
          ${ProgressBar.CSS_VAR_PREFIX}danger-fill-gradient-end: #dc2626;
          
          ${ProgressBar.CSS_VAR_PREFIX}warning-fill-bg: #f59e0b;
          ${ProgressBar.CSS_VAR_PREFIX}warning-fill-gradient-start: #f59e0b;
          ${ProgressBar.CSS_VAR_PREFIX}warning-fill-gradient-end: #d97706;
        }
      `;
          document.head.appendChild(style);
        }
      }
      /**
         * Create a new progress bar.
         * @param {Object} options - Configuration options.
         * @param {number} options.initialValue - Initial progress value (0-100).
         * @param {string} [options.className='userscripts-progress'] - CSS class for styling.
         * @param {HTMLElement} options.container - Container element to which the progress bar will be appended.
         * @param {boolean} [options.showText=true] - Whether to display the progress text.
         * @param {boolean} [options.showLabel=false] - Whether to display a label above the progress bar.
         * @param {string} [options.label=''] - Label text to display if showLabel is true.
         * @param {string} [options.theme='default'] - Theme for the progress bar (e.g., "default", "primary", "success").
         * @param {string} [options.size='normal'] - Size of the progress bar ('small', 'normal', 'large').
         */
      constructor(options) {
        this.value = options.initialValue || 0;
        this.className = options.className || ProgressBar.BASE_PROGRESS_CLASS;
        this.container = options.container;
        this.showText = options.showText !== undefined ? options.showText : true;
        this.showLabel = options.showLabel || false;
        this.label = options.label || '';
        this.theme = options.theme || 'default';
        this.size = options.size || 'normal';

        this.progressElement = null;
        this.progressBarElement = null;
        this.progressFillElement = null;
        this.progressTextElement = null;
        this.labelElement = null;

        ProgressBar.initStyles();
        this.create();
      }


      /**
         * Creates the progress bar elements and appends them to the container if provided.
         * @return {HTMLElement} The created progress bar container element.
         */
      create() {
        // Create the progress bar container
        this.progressElement = document.createElement('div');
        this.progressElement.className = `${this.className} ${this.className}--${this.theme}`;

        if ('normal' !== this.size) {
          this.progressElement.classList.add(`${this.className}--${this.size}`);
        }

        // Add a label if requested
        if (this.showLabel) {
          this.labelElement = document.createElement('span');
          this.labelElement.className = `${this.className}-label`;
          this.labelElement.textContent = this.label;
          this.progressElement.appendChild(this.labelElement);
        }

        // Create the progress bar and its fill
        this.progressBarElement = document.createElement('div');
        this.progressBarElement.className = `${this.className}-bar`;

        this.progressFillElement = document.createElement('div');
        this.progressFillElement.className = `${this.className}-fill`;
        this.progressFillElement.style.width = `${this.value}%`;

        this.progressBarElement.appendChild(this.progressFillElement);
        this.progressElement.appendChild(this.progressBarElement);

        // Add progress text as absolute positioned element
        if (this.showText) {
          this.progressTextElement = document.createElement('div');
          this.progressTextElement.className = `${this.className}-text`;
          this.progressTextElement.textContent = `${this.value}%`;
          this.progressBarElement.appendChild(this.progressTextElement);
        }

        // Append the entire progress element to the container, if one was provided
        if (this.container) {
          this.container.appendChild(this.progressElement);
        }
        return this.progressElement;
      }

      /**
         * Updates the progress value and (optionally) the display text.
         * @param {number} value - The new progress value (between 0 and 100).
         * @param {string} [text] - Optional custom text to display.
         * @return {number} The updated progress value.
         */
      setValue(value, text) {
        this.value = Math.min(100, Math.max(0, value));
        if (this.progressFillElement) {
          this.progressFillElement.style.width = `${this.value}%`;
        }
        if (this.showText && this.progressTextElement) {
          this.progressTextElement.textContent = text || `${this.value}%`;
        }
        return this.value;
      }

      /**
         * Changes the progress bar theme by updating the theme class.
         * @param {string} theme - The new theme (e.g., "default", "primary", "success", etc.).
         */
      setTheme(theme) {
        this.theme = theme;
        if (this.progressElement) {
          // Remove any existing theme class (assumed to be in the format `${this.className}--<theme>`)
          const classes = this.progressElement.className.split(' ');
          const nonThemeClasses = classes.filter((cls) =>
            !cls.startsWith(`${this.className}--`) ||
                    cls === `${this.className}--${this.size}`, // Keep size class
          );
          this.progressElement.className = `${nonThemeClasses.join(' ')} ${this.className}--${this.theme}`;
        }
      }

      /**
         * Changes the progress bar size.
         * @param {string} size - The new size ('small', 'normal', 'large').
         */
      setSize(size) {
        this.size = size;
        if (this.progressElement) {
          // Remove size classes
          this.progressElement.classList.remove(`${this.className}--small`);
          this.progressElement.classList.remove(`${this.className}--large`);

          // Add new size class if not normal
          if ('normal' !== size) {
            this.progressElement.classList.add(`${this.className}--${size}`);
          }
        }
      }

      /**
         * Sets the label text for the progress bar.
         * @param {string} label - The new label text.
         */
      setLabel(label) {
        this.label = label;
        if (this.labelElement) {
          this.labelElement.textContent = label;
        }
      }

      /**
         * Shows or hides the entire progress bar.
         * @param {boolean} visible - True to show, false to hide.
         */
      setVisible(visible) {
        if (this.progressElement) {
          this.progressElement.style.display = visible ? '' : 'none';
        }
      }

      /**
         * Destroys the progress bar and removes it from the DOM.
         */
      destroy() {
        if (this.progressElement && this.progressElement.parentNode) {
          this.progressElement.parentNode.removeChild(this.progressElement);
        }
        this.progressElement = null;
        this.progressBarElement = null;
        this.progressFillElement = null;
        this.progressTextElement = null;
        this.labelElement = null;
      }
    }

    // Static property to track if styles have been initialized.
    ProgressBar.stylesInitialized = false;

    // Initialize styles when imported.
    ProgressBar.initStyles();

    /**
     * Checkbox - A reusable UI component for checkboxes.
     * Creates customizable, accessible checkboxes with various states and callbacks.
     */

    /**
     * A reusable UI component for creating accessible, customizable checkboxes.
     */
    class Checkbox {
      /**
         * Returns the unique base CSS class for the Checkbox component.
         * This class is used as the root for all styling and helps prevent CSS collisions.
         *
         * @return {string} The base CSS class name for checkboxes.
         */
      static get BASE_CHECKBOX_CLASS() {
        return 'userscripts-checkbox';
      }
      /**
         * Returns the CSS variable prefix used for theming and styling the Checkbox component.
         * This prefix scopes all custom CSS variables (e.g., colors, borders) related to the checkbox.
         *
         * @return {string} The CSS variable prefix.
         */
      static get CSS_VAR_PREFIX() {
        return '--userscripts-checkbox-';
      }
      /**
         * Initialize styles for all checkboxes.
         * These styles reference the CSS variables with our defined prefix.
         */
      static initStyles() {
        if (Checkbox.stylesInitialized) return;
        StyleManager.addStyles(`
      /* Scoped styles for Userscripts Checkbox Component */
      .${Checkbox.BASE_CHECKBOX_CLASS}-container {
        display: inline-flex;
        align-items: center;
        position: relative;
        cursor: pointer;
        user-select: none;
        font-family: inherit;
      }
      
      .${Checkbox.BASE_CHECKBOX_CLASS}-container--disabled {
        opacity: 0.65;
        cursor: not-allowed;
      }
      
      /* Hide native checkbox */
      .${Checkbox.BASE_CHECKBOX_CLASS}-native {
        position: absolute;
        opacity: 0;
        height: 0;
        width: 0;
      }
      
      /* Custom checkbox appearance */
      .${Checkbox.BASE_CHECKBOX_CLASS} {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 1.25rem;
        height: 1.25rem;
        border-radius: 0.25rem;
        border: 2px solid var(${Checkbox.CSS_VAR_PREFIX}border-color);
        background-color: var(${Checkbox.CSS_VAR_PREFIX}bg);
        transition: all 0.2s ease;
        position: relative;
      }
      
      /* Check mark (initially hidden) */
      .${Checkbox.BASE_CHECKBOX_CLASS}::after {
        content: '';
        position: absolute;
        opacity: 0;
        transform: rotate(45deg) scale(0);
        width: 0.3125rem;
        height: 0.625rem;
        border-right: 2px solid var(${Checkbox.CSS_VAR_PREFIX}checkmark-color);
        border-bottom: 2px solid var(${Checkbox.CSS_VAR_PREFIX}checkmark-color);
        transition: all 0.2s ease;
      }
      
      /* When checkbox is checked */
      .${Checkbox.BASE_CHECKBOX_CLASS}--checked {
        background-color: var(${Checkbox.CSS_VAR_PREFIX}checked-bg);
        border-color: var(${Checkbox.CSS_VAR_PREFIX}checked-border);
      }
      
      .${Checkbox.BASE_CHECKBOX_CLASS}--checked::after {
        opacity: 1;
        transform: rotate(45deg) scale(1);
      }
      
      /* Indeterminate state */
      .${Checkbox.BASE_CHECKBOX_CLASS}--indeterminate::after {
        opacity: 1;
        transform: rotate(0) scale(1);
        width: 0.625rem;
        height: 0.125rem;
        border-right: none;
        border-bottom: 2px solid var(${Checkbox.CSS_VAR_PREFIX}checkmark-color);
      }
      
      /* On hover */
      .${Checkbox.BASE_CHECKBOX_CLASS}-container:hover .${Checkbox.BASE_CHECKBOX_CLASS}:not(.${Checkbox.BASE_CHECKBOX_CLASS}--checked):not(.${Checkbox.BASE_CHECKBOX_CLASS}--indeterminate) {
        border-color: var(${Checkbox.CSS_VAR_PREFIX}hover-border);
        background-color: var(${Checkbox.CSS_VAR_PREFIX}hover-bg);
      }
      
      /* On focus */
      .${Checkbox.BASE_CHECKBOX_CLASS}-container:focus-within .${Checkbox.BASE_CHECKBOX_CLASS} {
        box-shadow: 0 0 0 3px var(${Checkbox.CSS_VAR_PREFIX}focus-shadow);
      }
      
      /* Label styles */
      .${Checkbox.BASE_CHECKBOX_CLASS}-label {
        margin-left: 0.5rem;
        font-size: 0.875rem;
      }
      
      /* Checkbox sizes */
      .${Checkbox.BASE_CHECKBOX_CLASS}--small {
        width: 1rem;
        height: 1rem;
      }
      
      .${Checkbox.BASE_CHECKBOX_CLASS}--small::after {
        width: 0.25rem;
        height: 0.5rem;
      }
      
      .${Checkbox.BASE_CHECKBOX_CLASS}--large {
        width: 1.5rem;
        height: 1.5rem;
      }
      
      .${Checkbox.BASE_CHECKBOX_CLASS}--large::after {
        width: 0.375rem;
        height: 0.75rem;
      }
    `, 'userscripts-checkbox-styles');

        Checkbox.stylesInitialized = true;
      }
      /**
         * Inject default color variables for the checkbox component into the :root.
         * Users can call this method to automatically set a default color palette.
         */
      static useDefaultColors() {
        const styleId = 'userscripts-checkbox-default-colors';
        if (!document.getElementById(styleId)) {
          const style = document.createElement('style');
          style.id = styleId;
          style.innerHTML = `
        :root {
          /* Default state */
          ${Checkbox.CSS_VAR_PREFIX}bg: #ffffff;
          ${Checkbox.CSS_VAR_PREFIX}border-color: #d1d5db;
          ${Checkbox.CSS_VAR_PREFIX}hover-bg: #f3f4f6;
          ${Checkbox.CSS_VAR_PREFIX}hover-border: #9ca3af;
          
          /* Checked state */
          ${Checkbox.CSS_VAR_PREFIX}checked-bg: #3b82f6;
          ${Checkbox.CSS_VAR_PREFIX}checked-border: #3b82f6;
          ${Checkbox.CSS_VAR_PREFIX}checkmark-color: #ffffff;
          
          /* Focus state */
          ${Checkbox.CSS_VAR_PREFIX}focus-shadow: rgba(59, 130, 246, 0.3);
        }
      `;
          document.head.appendChild(style);
        }
      }
      /**
         * Create a new Checkbox.
         * @param {Object} options - Configuration options.
         * @param {String} [options.label] - Checkbox label text.
         * @param {Boolean} [options.checked=false] - Initial checked state.
         * @param {Boolean} [options.indeterminate=false] - Initial indeterminate state.
         * @param {String} [options.id] - Checkbox ID.
         * @param {String} [options.name] - Input name attribute.
         * @param {Function} [options.onChange] - Change event handler.
         * @param {HTMLElement} [options.container] - Container to append the checkbox to.
         * @param {String} [options.className] - Additional custom CSS class.
         * @param {Boolean} [options.disabled=false] - Disabled state.
         * @param {String} [options.size="medium"] - Checkbox size.
         * @param {Object} [options.attributes={}] - Additional HTML attributes.
         */
      constructor(options = {}) {
        this.label = options.label || '';
        this.checked = options.checked || false;
        this.indeterminate = options.indeterminate || false;
        this.id = options.id;
        this.name = options.name;
        this.onChange = options.onChange;
        this.container = options.container;
        this.customClassName = options.className || '';
        this.disabled = options.disabled || false;
        this.size = options.size || 'medium';
        this.attributes = options.attributes || {};

        // DOM elements references
        this.checkboxContainer = null;
        this.customCheckbox = null;
        this.nativeCheckbox = null;
        this.labelElement = null;

        Checkbox.initStyles();
        this.create();
      }


      /**
         * Create the checkbox UI and, if a container is provided, append it.
         * @return {HTMLElement} The created checkbox container element.
         */
      create() {
        // Create container
        this.checkboxContainer = document.createElement('label');
        this.checkboxContainer.className = `${Checkbox.BASE_CHECKBOX_CLASS}-container`;
        if (this.customClassName) {
          this.checkboxContainer.classList.add(this.customClassName);
        }
        if (this.disabled) {
          this.checkboxContainer.classList.add(`${Checkbox.BASE_CHECKBOX_CLASS}-container--disabled`);
        }

        // Create hidden native checkbox for accessibility
        this.nativeCheckbox = document.createElement('input');
        this.nativeCheckbox.type = 'checkbox';
        this.nativeCheckbox.className = `${Checkbox.BASE_CHECKBOX_CLASS}-native`;
        this.nativeCheckbox.checked = this.checked;
        this.nativeCheckbox.indeterminate = this.indeterminate;
        this.nativeCheckbox.disabled = this.disabled;

        if (this.id) this.nativeCheckbox.id = this.id;
        if (this.name) this.nativeCheckbox.name = this.name;

        Object.entries(this.attributes).forEach(([key, value]) => {
          this.nativeCheckbox.setAttribute(key, value);
        });

        // Create custom checkbox visual
        this.customCheckbox = document.createElement('span');
        this.customCheckbox.className = `${Checkbox.BASE_CHECKBOX_CLASS} ${Checkbox.BASE_CHECKBOX_CLASS}--${this.size}`;
        if (this.checked) {
          this.customCheckbox.classList.add(`${Checkbox.BASE_CHECKBOX_CLASS}--checked`);
        } else if (this.indeterminate) {
          this.customCheckbox.classList.add(`${Checkbox.BASE_CHECKBOX_CLASS}--indeterminate`);
        }

        // Create label if provided
        if (this.label) {
          this.labelElement = document.createElement('span');
          this.labelElement.className = `${Checkbox.BASE_CHECKBOX_CLASS}-label`;
          this.labelElement.textContent = this.label;
        }

        // Set up event listeners
        this.nativeCheckbox.addEventListener('change', (e) => this.handleChange(e));
        this.nativeCheckbox.addEventListener('focus', () => this.handleFocus());
        this.nativeCheckbox.addEventListener('blur', () => this.handleBlur());

        // Assemble the component
        this.checkboxContainer.appendChild(this.nativeCheckbox);
        this.checkboxContainer.appendChild(this.customCheckbox);
        if (this.labelElement) {
          this.checkboxContainer.appendChild(this.labelElement);
        }

        // Add to container if provided
        if (this.container) {
          this.container.appendChild(this.checkboxContainer);
        }

        // Store reference to instance on DOM element for potential external access
        this.checkboxContainer._checkboxInstance = this;

        return this.checkboxContainer;
      }

      /**
         * Handle change events.
         * @param {Event} e - The change event.
         */
      handleChange(e) {
        this.checked = this.nativeCheckbox.checked;
        this.indeterminate = this.nativeCheckbox.indeterminate;

        if (this.checked) {
          this.customCheckbox.classList.add(`${Checkbox.BASE_CHECKBOX_CLASS}--checked`);
          this.customCheckbox.classList.remove(`${Checkbox.BASE_CHECKBOX_CLASS}--indeterminate`);
        } else if (this.indeterminate) {
          this.customCheckbox.classList.add(`${Checkbox.BASE_CHECKBOX_CLASS}--indeterminate`);
          this.customCheckbox.classList.remove(`${Checkbox.BASE_CHECKBOX_CLASS}--checked`);
        } else {
          this.customCheckbox.classList.remove(`${Checkbox.BASE_CHECKBOX_CLASS}--checked`);
          this.customCheckbox.classList.remove(`${Checkbox.BASE_CHECKBOX_CLASS}--indeterminate`);
        }

        if (this.onChange) {
          this.onChange(e);
        }
      }

      /**
         * Handle focus events.
         */
      handleFocus() {
        // Additional focus behaviors can be added here if needed
      }

      /**
         * Handle blur events.
         */
      handleBlur() {
        // Additional blur behaviors can be added here if needed
      }

      /**
         * Set the checked state.
         * @param {Boolean} checked - The new checked state.
         */
      setChecked(checked) {
        this.checked = checked;
        this.nativeCheckbox.checked = checked;

        if (checked) {
          this.customCheckbox.classList.add(`${Checkbox.BASE_CHECKBOX_CLASS}--checked`);
          this.indeterminate = false;
          this.nativeCheckbox.indeterminate = false;
          this.customCheckbox.classList.remove(`${Checkbox.BASE_CHECKBOX_CLASS}--indeterminate`);
        } else {
          this.customCheckbox.classList.remove(`${Checkbox.BASE_CHECKBOX_CLASS}--checked`);
        }
      }

      /**
         * Set the indeterminate state.
         * @param {Boolean} indeterminate - The new indeterminate state.
         */
      setIndeterminate(indeterminate) {
        this.indeterminate = indeterminate;
        this.nativeCheckbox.indeterminate = indeterminate;

        if (indeterminate) {
          this.customCheckbox.classList.add(`${Checkbox.BASE_CHECKBOX_CLASS}--indeterminate`);
          this.customCheckbox.classList.remove(`${Checkbox.BASE_CHECKBOX_CLASS}--checked`);
        } else {
          this.customCheckbox.classList.remove(`${Checkbox.BASE_CHECKBOX_CLASS}--indeterminate`);
        }
      }

      /**
         * Toggle the checked state.
         * @return {Boolean} The new checked state.
         */
      toggle() {
        this.setChecked(!this.checked);
        return this.checked;
      }

      /**
         * Set the disabled state.
         * @param {Boolean} disabled - The new disabled state.
         */
      setDisabled(disabled) {
        this.disabled = disabled;
        this.nativeCheckbox.disabled = disabled;

        if (disabled) {
          this.checkboxContainer.classList.add(`${Checkbox.BASE_CHECKBOX_CLASS}-container--disabled`);
        } else {
          this.checkboxContainer.classList.remove(`${Checkbox.BASE_CHECKBOX_CLASS}-container--disabled`);
        }
      }

      /**
         * Set the label text.
         * @param {String} text - The new label text.
         */
      setLabel(text) {
        this.label = text;

        if (!this.labelElement) {
          this.labelElement = document.createElement('span');
          this.labelElement.className = `${Checkbox.BASE_CHECKBOX_CLASS}-label`;
          this.checkboxContainer.appendChild(this.labelElement);
        }

        this.labelElement.textContent = text;
      }

      /**
         * Change the checkbox size.
         * @param {String} size - The new size (e.g., "small", "medium", "large").
         */
      setSize(size) {
        this.customCheckbox.classList.remove(`${Checkbox.BASE_CHECKBOX_CLASS}--${this.size}`);
        this.size = size;
        this.customCheckbox.classList.add(`${Checkbox.BASE_CHECKBOX_CLASS}--${this.size}`);
      }

      /**
         * Apply a custom CSS class to the checkbox container.
         * @param {String} className - The custom class name.
         */
      setCustomClass(className) {
        if (this.customClassName) {
          this.checkboxContainer.classList.remove(this.customClassName);
        }
        this.customClassName = className;
        if (className) {
          this.checkboxContainer.classList.add(className);
        }
      }

      /**
         * Get the current checked state.
         * @return {Boolean} The current checked state.
         */
      isChecked() {
        return this.checked;
      }

      /**
         * Get the current indeterminate state.
         * @return {Boolean} The current indeterminate state.
         */
      isIndeterminate() {
        return this.indeterminate;
      }

      /**
         * Get the current disabled state.
         * @return {Boolean} The current disabled state.
         */
      isDisabled() {
        return this.disabled;
      }
    }

    // Static property to track if styles have been initialized.
    Checkbox.stylesInitialized = false;
    Checkbox.initStyles();

    /**
     * SidebarPanel - A reusable UI component for creating a sidebar panel with a trigger button
     * Similar to Wallapop's help button that shifts the site content
     */

    /**
     * A reusable component that creates a toggle button and sidebar panel
     */
    class SidebarPanel {
        // Panel states
        static PANEL_STATES = {
            OPENED: 'opened',
            CLOSED: 'closed'
        };

        // Panel positions
        static PANEL_POSITIONS = {
            RIGHT: 'right',
            LEFT: 'left'
        };

        // Panel transitions
        static PANEL_TRANSITIONS = {
            SLIDE: 'slide',
            PUSH: 'push'
        };

        // GM storage keys
        static STORAGE_KEYS = {
            PANEL_STATE: 'sidebar-panel-state',
            PANEL_SETTINGS: 'sidebar-panel-settings'
        };

        // PubSub events
        static EVENTS = {
            PANEL_OPEN: 'sidebar-panel-open',
            PANEL_CLOSE: 'sidebar-panel-close',
            PANEL_TOGGLE: 'sidebar-panel-toggle',
            PANEL_INITIALIZED: 'sidebar-panel-initialized'
        };

        /**
         * Create a new SidebarPanel.
         * @param {Object} options - Configuration options.
         * @param {String} options.title - Panel title.
         * @param {String} [options.id="sidebar-panel"] - Unique ID for the panel.
         * @param {String} [options.position="right"] - Position of the panel ("right" or "left").
         * @param {String} [options.transition="slide"] - Transition effect ("slide" or "push").
         * @param {String} [options.buttonIcon="?"] - HTML content for the toggle button.
         * @param {Boolean} [options.showButton=true] - Whether to show the toggle button.
         * @param {String} [options.namespace="userscripts"] - Namespace for CSS classes.
         * @param {Function} [options.onOpen=null] - Callback when panel opens.
         * @param {Function} [options.onClose=null] - Callback when panel closes.
         * @param {Boolean} [options.overlay=true] - Whether to show an overlay behind the panel.
         * @param {Object} [options.content={}] - Content configuration.
         * @param {String|HTMLElement} [options.content.html=null] - HTML content for the panel.
         * @param {Function} [options.content.generator=null] - Function that returns content.
         * @param {Boolean} [options.rememberState=true] - Whether to remember the panel state.
         * @param {Object} [options.style={}] - Custom style options.
         * @param {String} [options.style.width="320px"] - Panel width.
         * @param {String} [options.style.buttonSize="48px"] - Button size.
         * @param {String} [options.style.buttonColor="#fff"] - Button text color.
         * @param {String} [options.style.buttonBg="#625df5"] - Button background color.
         * @param {String} [options.style.panelBg="#fff"] - Panel background color.
         */
        constructor(options = {}) {
            // Process and store options with defaults
            this.options = {
                title: options.title || 'Panel',
                id: options.id || 'sidebar-panel',
                position: options.position || SidebarPanel.PANEL_POSITIONS.RIGHT,
                transition: options.transition || SidebarPanel.PANEL_TRANSITIONS.SLIDE,
                buttonIcon: options.buttonIcon || '?',
                showButton: options.showButton !== false,
                namespace: options.namespace || 'userscripts',
                onOpen: options.onOpen || null,
                onClose: options.onClose || null,
                overlay: options.overlay !== false,
                content: options.content || {},
                rememberState: options.rememberState !== false,
                style: options.style || {}
            };

            // Setup base class names based on namespace
            this.baseClass = `${this.options.namespace}-sidebar-panel`;
            this.cssVarPrefix = `--${this.options.namespace}-sidebar-panel-`;

            // Elements references
            this.container = null;
            this.panel = null;
            this.button = null;
            this.closeButton = null;
            this.content = null;
            this.header = null;
            this.footer = null;
            this.overlay = null;

            // Panel state
            this.state = this.getSavedState() || SidebarPanel.PANEL_STATES.CLOSED;

            // Storage key for this specific panel instance
            this.storageKey = `${SidebarPanel.STORAGE_KEYS.PANEL_STATE}-${this.options.id}`;

            // Initialize the component
            this.init();
        }

        /**
         * Initialize the styles for the SidebarPanel
         * @param {String} namespace - Optional namespace to prevent CSS collisions
         */
        static initStyles(namespace = 'userscripts') {
            const baseClass = `${namespace}-sidebar-panel`;
            const cssVarPrefix = `--${namespace}-sidebar-panel-`;

            StyleManager.addStyles(`
            /* Base styles for the sidebar panel */
            .${baseClass}-container {
                position: fixed;
                top: 0;
                height: 100%;
                z-index: 9998;
                transition: transform 0.3s ease-in-out;
            }
            
            .${baseClass}-container--right {
                right: 0;
                transform: translateX(100%);
            }
            
            .${baseClass}-container--left {
                left: 0;
                transform: translateX(-100%);
            }
            
            .${baseClass}-container--opened {
                transform: translateX(0);
                box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
            }
            
            .${baseClass} {
                width: var(${cssVarPrefix}width, 320px);
                height: 100%;
                background-color: var(${cssVarPrefix}bg, #fff);
                display: flex;
                flex-direction: column;
                overflow: hidden;
                position: relative;
            }
            
            .${baseClass}-header {
                padding: 16px;
                background-color: var(${cssVarPrefix}header-bg, #f5f5f5);
                border-bottom: 1px solid var(${cssVarPrefix}border-color, #eee);
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .${baseClass}-title {
                font-weight: bold;
                font-size: 18px;
                color: var(${cssVarPrefix}title-color, #333);
                margin: 0;
            }
            
            .${baseClass}-close {
                background: none;
                border: none;
                cursor: pointer;
                font-size: 24px;
                line-height: 24px;
                padding: 0;
                width: 24px;
                height: 24px;
                color: var(${cssVarPrefix}close-color, #777);
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .${baseClass}-close:hover {
                color: var(${cssVarPrefix}close-color-hover, #333);
            }
            
            .${baseClass}-content {
                flex: 1;
                overflow-y: auto;
                padding: 16px;
            }
            
            .${baseClass}-footer {
                padding: 16px;
                background-color: var(${cssVarPrefix}footer-bg, #f5f5f5);
                border-top: 1px solid var(${cssVarPrefix}border-color, #eee);
            }
            
            /* Toggle button styles */
            .${baseClass}-toggle {
                position: fixed;
                width: var(${cssVarPrefix}button-size, 48px);
                height: var(${cssVarPrefix}button-size, 48px);
                border-radius: 50%;
                background-color: var(${cssVarPrefix}button-bg, #625df5);
                color: var(${cssVarPrefix}button-color, #fff);
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
                z-index: 9999;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
                border: none;
                outline: none;
                transition: background-color 0.2s ease, transform 0.2s ease;
            }
            
            .${baseClass}-toggle:hover {
                background-color: var(${cssVarPrefix}button-bg-hover, #514dc6);
                transform: scale(1.05);
            }
            
            .${baseClass}-toggle--right {
                right: 20px;
                bottom: 20px;
            }
            
            .${baseClass}-toggle--left {
                left: 20px;
                bottom: 20px;
            }
            
            /* For push transition effect */
            body.${baseClass}-push-active--right {
                transition: margin-left 0.3s ease-in-out;
            }
            
            body.${baseClass}-push-active--right.${baseClass}-push--opened {
                margin-left: calc(-1 * var(${cssVarPrefix}width, 320px));
            }
            
            body.${baseClass}-push-active--left {
                transition: margin-right 0.3s ease-in-out;
            }
            
            body.${baseClass}-push-active--left.${baseClass}-push--opened {
                margin-right: calc(-1 * var(${cssVarPrefix}width, 320px));
            }
            
            /* Overlay for mobile views */
            .${baseClass}-overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                z-index: 9997;
                opacity: 0;
                visibility: hidden;
                transition: opacity 0.3s ease;
                pointer-events: none;
            }
            
            .${baseClass}-overlay--visible {
                opacity: 1;
                visibility: visible;
                pointer-events: auto;
            }
            
            /* Responsive styles */
            @media (max-width: 768px) {
                .${baseClass} {
                    width: 85vw;
                }
            }
        `, `${namespace}-sidebar-panel-styles`);
        }

        /**
         * Initialize the panel and button
         */
        init() {
            // Initialize styles if not already done
            SidebarPanel.initStyles(this.options.namespace);

            // Create custom CSS variables for this instance
            this.applyCustomStyles();

            // Create the panel elements
            this.createPanel();

            // Create toggle button if needed
            if (this.options.showButton) {
                this.createToggleButton();
            }

            // Create overlay if needed
            if (this.options.overlay) {
                this.createOverlay();
            }

            // Set up events
            this.setupEvents();

            // Apply saved state if we're remembering state
            if (this.options.rememberState) {
                if (this.state === SidebarPanel.PANEL_STATES.OPENED) {
                    this.open(false); // Open without animation for initial state
                }
            }

            // Publish initialization event
            PubSub.publish(SidebarPanel.EVENTS.PANEL_INITIALIZED, {
                id: this.options.id,
                panel: this
            });

            Logger.debug(`SidebarPanel initialized: ${this.options.id}`);
        }

        /**
         * Apply custom styles from options
         */
        applyCustomStyles() {
            const customStyles = {};

            // Process style options
            if (this.options.style.width) {
                customStyles[`${this.cssVarPrefix}width`] = this.options.style.width;
            }
            if (this.options.style.buttonSize) {
                customStyles[`${this.cssVarPrefix}button-size`] = this.options.style.buttonSize;
            }
            if (this.options.style.buttonColor) {
                customStyles[`${this.cssVarPrefix}button-color`] = this.options.style.buttonColor;
            }
            if (this.options.style.buttonBg) {
                customStyles[`${this.cssVarPrefix}button-bg`] = this.options.style.buttonBg;
            }
            if (this.options.style.buttonBgHover) {
                customStyles[`${this.cssVarPrefix}button-bg-hover`] = this.options.style.buttonBgHover;
            }
            if (this.options.style.panelBg) {
                customStyles[`${this.cssVarPrefix}bg`] = this.options.style.panelBg;
            }

            // Apply the CSS variables using StyleManager
            if (Object.keys(customStyles).length > 0) {
                const styleId = `${this.baseClass}-custom-${this.options.id}`;
                let cssText = `:root {\n`;

                for (const [key, value] of Object.entries(customStyles)) {
                    cssText += `  ${key}: ${value};\n`;
                }

                cssText += `}\n`;
                StyleManager.addStyles(cssText, styleId);
            }
        }

        /**
         * Create the panel element
         */
        createPanel() {
            // Create panel container
            this.container = document.createElement('div');
            this.container.id = `${this.baseClass}-${this.options.id}`;
            this.container.className = `${this.baseClass}-container ${this.baseClass}-container--${this.options.position}`;

            // Create panel
            this.panel = document.createElement('div');
            this.panel.className = this.baseClass;

            // Create panel header
            this.header = document.createElement('div');
            this.header.className = `${this.baseClass}-header`;

            // Create title
            const title = document.createElement('h2');
            title.className = `${this.baseClass}-title`;
            title.textContent = this.options.title;
            this.header.appendChild(title);

            // Create close button
            this.closeButton = document.createElement('button');
            this.closeButton.type = 'button';
            this.closeButton.className = `${this.baseClass}-close`;
            this.closeButton.innerHTML = '×';
            this.closeButton.setAttribute('aria-label', 'Close');
            this.header.appendChild(this.closeButton);

            // Create content container
            this.content = document.createElement('div');
            this.content.className = `${this.baseClass}-content`;

            // Add initial content if provided
            if (this.options.content.html) {
                if (typeof this.options.content.html === 'string') {
                    this.content.innerHTML = this.options.content.html;
                } else if (this.options.content.html instanceof HTMLElement) {
                    this.content.appendChild(this.options.content.html);
                }
            } else if (this.options.content.generator && typeof this.options.content.generator === 'function') {
                const generatedContent = this.options.content.generator();
                if (typeof generatedContent === 'string') {
                    this.content.innerHTML = generatedContent;
                } else if (generatedContent instanceof HTMLElement) {
                    this.content.appendChild(generatedContent);
                }
            }

            // Create footer (optional)
            if (this.options.footer) {
                this.footer = document.createElement('div');
                this.footer.className = `${this.baseClass}-footer`;

                if (typeof this.options.footer === 'string') {
                    this.footer.innerHTML = this.options.footer;
                } else if (this.options.footer instanceof HTMLElement) {
                    this.footer.appendChild(this.options.footer);
                }
            }

            // Assemble the panel
            this.panel.appendChild(this.header);
            this.panel.appendChild(this.content);
            if (this.footer) {
                this.panel.appendChild(this.footer);
            }
            this.container.appendChild(this.panel);

            // Add to document
            document.body.appendChild(this.container);
        }

        /**
         * Create toggle button
         */
        createToggleButton() {
            this.button = document.createElement('button');
            this.button.type = 'button';
            this.button.className = `${this.baseClass}-toggle ${this.baseClass}-toggle--${this.options.position}`;
            this.button.innerHTML = this.options.buttonIcon;
            this.button.setAttribute('aria-label', `Open ${this.options.title}`);

            // Add to document
            document.body.appendChild(this.button);
        }

        /**
         * Create overlay element
         */
        createOverlay() {
            this.overlay = document.createElement('div');
            this.overlay.className = `${this.baseClass}-overlay`;
            document.body.appendChild(this.overlay);
        }

        /**
         * Set up event listeners
         */
        setupEvents() {
            // Toggle button click
            if (this.button) {
                this.button.addEventListener('click', () => this.toggle());
            }

            // Close button click
            if (this.closeButton) {
                this.closeButton.addEventListener('click', () => this.close());
            }

            // Overlay click
            if (this.overlay) {
                this.overlay.addEventListener('click', () => this.close());
            }

            // Listen for PubSub events
            this.subscriptions = [
                PubSub.subscribe(`${SidebarPanel.EVENTS.PANEL_OPEN}-${this.options.id}`, () => this.open()),
                PubSub.subscribe(`${SidebarPanel.EVENTS.PANEL_CLOSE}-${this.options.id}`, () => this.close()),
                PubSub.subscribe(`${SidebarPanel.EVENTS.PANEL_TOGGLE}-${this.options.id}`, () => this.toggle())
            ];

            // ESC key to close
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && this.state === SidebarPanel.PANEL_STATES.OPENED) {
                    this.close();
                }
            });
        }

        /**
         * Toggle panel state
         */
        toggle() {
            if (this.state === SidebarPanel.PANEL_STATES.CLOSED) {
                this.open();
            } else {
                this.close();
            }
        }

        /**
         * Open the panel
         * @param {Boolean} animate - Whether to animate the opening
         */
        open(animate = true) {
            if (this.state === SidebarPanel.PANEL_STATES.OPENED) return;

            this.state = SidebarPanel.PANEL_STATES.OPENED;

            // Update panel class
            if (!animate) {
                this.container.style.transition = 'none';
                requestAnimationFrame(() => {
                    this.container.style.transition = '';
                });
            }

            this.container.classList.add(`${this.baseClass}-container--opened`);

            // Handle push transition
            if (this.options.transition === SidebarPanel.PANEL_TRANSITIONS.PUSH) {
                document.body.classList.add(`${this.baseClass}-push-active--${this.options.position}`);
                document.body.classList.add(`${this.baseClass}-push--opened`);
            }

            // Show overlay
            if (this.overlay) {
                this.overlay.classList.add(`${this.baseClass}-overlay--visible`);
            }

            // Save state
            if (this.options.rememberState) {
                this.saveState();
            }

            // Call onOpen callback if provided
            if (typeof this.options.onOpen === 'function') {
                this.options.onOpen();
            }

            // Publish event
            PubSub.publish(SidebarPanel.EVENTS.PANEL_OPEN, {
                id: this.options.id,
                panel: this
            });

            Logger.debug(`SidebarPanel opened: ${this.options.id}`);
        }

        /**
         * Close the panel
         */
        close() {
            if (this.state === SidebarPanel.PANEL_STATES.CLOSED) return;

            this.state = SidebarPanel.PANEL_STATES.CLOSED;

            // Update panel class
            this.container.classList.remove(`${this.baseClass}-container--opened`);

            // Handle push transition
            if (this.options.transition === SidebarPanel.PANEL_TRANSITIONS.PUSH) {
                document.body.classList.remove(`${this.baseClass}-push--opened`);
                // We keep the active class for transition
                setTimeout(() => {
                    if (this.state === SidebarPanel.PANEL_STATES.CLOSED) {
                        document.body.classList.remove(`${this.baseClass}-push-active--${this.options.position}`);
                    }
                }, 300); // Match transition duration
            }

            // Hide overlay
            if (this.overlay) {
                this.overlay.classList.remove(`${this.baseClass}-overlay--visible`);
            }

            // Save state
            if (this.options.rememberState) {
                this.saveState();
            }

            // Call onClose callback if provided
            if (typeof this.options.onClose === 'function') {
                this.options.onClose();
            }

            // Publish event
            PubSub.publish(SidebarPanel.EVENTS.PANEL_CLOSE, {
                id: this.options.id,
                panel: this
            });

            Logger.debug(`SidebarPanel closed: ${this.options.id}`);
        }

        /**
         * Get saved panel state from GM storage
         * @return {String|null} Panel state or null if not found
         */
        async getSavedState() {
            if (!this.options.rememberState) return null;

            try {
                // Use directly imported getValue
                const savedState = await getValue(this.storageKey, SidebarPanel.PANEL_STATES.CLOSED);
                // Validate state
                if (Object.values(SidebarPanel.PANEL_STATES).includes(savedState)) {
                    Logger.debug('Retrieved saved panel state:', savedState, 'for key:', this.storageKey);
                    return savedState;
                }
                Logger.warn('Invalid saved panel state retrieved:', savedState, 'for key:', this.storageKey);
            } catch (error) {
                Logger.error('Error retrieving saved panel state:', error, 'for key:', this.storageKey);
            }
            return SidebarPanel.PANEL_STATES.CLOSED; // Default to closed on error or invalid
        }

        /**
         * Save the current panel state (opened/closed) if rememberState is enabled.
         */
        async saveState() {
            if (!this.options.rememberState) return;

            try {
                // Use directly imported setValue
                await setValue(this.storageKey, this.state);
                Logger.debug('Saved panel state:', this.state, 'for key:', this.storageKey);
            } catch (error) {
                Logger.error('Error saving panel state:', error, 'for key:', this.storageKey);
            }
        }

        /**
         * Set panel content
         * @param {String|HTMLElement} content - HTML string or element to set as content
         */
        setContent(content) {
            if (!this.content) return;

            // Clear existing content
            this.content.innerHTML = '';

            // Add new content
            if (typeof content === 'string') {
                this.content.innerHTML = content;
            } else if (content instanceof HTMLElement) {
                this.content.appendChild(content);
            }
        }

        /**
         * Set panel title
         * @param {String} title - New title text
         */
        setTitle(title) {
            const titleElement = this.header ? this.header.querySelector(`.${this.baseClass}-title`) : null;
            if (titleElement) {
                titleElement.textContent = title;
                this.options.title = title;
            }
        }

        /**
         * Set button icon
         * @param {String} iconHtml - HTML string for icon content
         */
        setButtonIcon(iconHtml) {
            if (this.button) {
                this.button.innerHTML = iconHtml;
                this.options.buttonIcon = iconHtml;
            }
        }

        /**
         * Destroy the panel and clean up
         */
        destroy() {
            // Remove DOM elements
            if (this.container && this.container.parentNode) {
                this.container.parentNode.removeChild(this.container);
            }

            if (this.button && this.button.parentNode) {
                this.button.parentNode.removeChild(this.button);
            }

            if (this.overlay && this.overlay.parentNode) {
                this.overlay.parentNode.removeChild(this.overlay);
            }

            // Remove body classes
            document.body.classList.remove(`${this.baseClass}-push-active--${this.options.position}`);
            document.body.classList.remove(`${this.baseClass}-push--opened`);

            // Unsubscribe from PubSub events
            if (this.subscriptions) {
                this.subscriptions.forEach(subscriptionId => {
                    PubSub.unsubscribe(subscriptionId);
                });
            }

            Logger.debug(`SidebarPanel destroyed: ${this.options.id}`);
        }
    }

    /**
     * Notification - A reusable UI component for toast notifications.
     * Creates customizable, temporary notifications that appear and disappear automatically.
     */

    /**
     * A reusable UI component for creating toast notifications that provide non-intrusive
     * feedback to users.
     */
    class Notification {
        /**
         * Storage for the notification container elements by position
         * @private
         */
        static _containers = {};
        /**
         * Storage for all active notifications
         * @private
         */
        static _activeNotifications = [];
        /**
         * Counter for generating unique notification IDs
         * @private
         */
        static _idCounter = 0;
        /**
         * Maximum number of notifications to show per container
         * @private
         */
        static _maxNotificationsPerContainer = 5;
        /**
         * Queue for notifications waiting to be shown
         * @private
         */
        static _queue = [];

        /**
         * Returns the unique base CSS class for the Notification component.
         * This class is used as the root for all styling and helps prevent CSS collisions.
         *
         * @return {string} The base CSS class name for notifications.
         */
        static get BASE_NOTIFICATION_CLASS() {
            return 'userscripts-notification';
        }

        /**
         * Returns the CSS variable prefix used for theming the Notification component.
         * This prefix scopes all custom CSS variables related to the notification.
         *
         * @return {string} The CSS variable prefix.
         */
        static get CSS_VAR_PREFIX() {
            return '--userscripts-notification-';
        }

        /**
         * Initialize styles for all notifications.
         * These styles reference the CSS variables with our defined prefix.
         */
        static initStyles() {
            if (Notification.stylesInitialized) return;

            StyleManager.addStyles(`
      /* Container for all notifications */
      .${Notification.BASE_NOTIFICATION_CLASS}-container {
        position: fixed;
        display: flex;
        flex-direction: column;
        gap: 8px;
        z-index: 9999;
        pointer-events: none; /* Allow clicking through the container */
        
        /* Default positioning at bottom center */
        bottom: var(${Notification.CSS_VAR_PREFIX}container-bottom, 16px);
        left: 50%;
        transform: translateX(-50%);
        
        /* Container width */
        width: var(${Notification.CSS_VAR_PREFIX}container-width, auto);
        max-width: var(${Notification.CSS_VAR_PREFIX}container-max-width, 350px);
      }
      
      /* Position variants */
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-center {
        top: var(${Notification.CSS_VAR_PREFIX}container-top, 16px);
        bottom: auto;
      }
      
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-left {
        top: var(${Notification.CSS_VAR_PREFIX}container-top, 16px);
        left: var(${Notification.CSS_VAR_PREFIX}container-left, 16px);
        bottom: auto;
        transform: none;
      }
      
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-right {
        top: var(${Notification.CSS_VAR_PREFIX}container-top, 16px);
        right: var(${Notification.CSS_VAR_PREFIX}container-right, 16px);
        left: auto;
        bottom: auto;
        transform: none;
      }
      
      .${Notification.BASE_NOTIFICATION_CLASS}-container--bottom-left {
        bottom: var(${Notification.CSS_VAR_PREFIX}container-bottom, 16px);
        left: var(${Notification.CSS_VAR_PREFIX}container-left, 16px);
        transform: none;
      }
      
      .${Notification.BASE_NOTIFICATION_CLASS}-container--bottom-right {
        bottom: var(${Notification.CSS_VAR_PREFIX}container-bottom, 16px);
        right: var(${Notification.CSS_VAR_PREFIX}container-right, 16px);
        left: auto;
        transform: none;
      }
      
      /* Individual notification toast */
      .${Notification.BASE_NOTIFICATION_CLASS} {
        position: relative;
        display: flex;
        align-items: center;
        padding: var(${Notification.CSS_VAR_PREFIX}padding, 12px 16px);
        border-radius: var(${Notification.CSS_VAR_PREFIX}border-radius, 6px);
        box-shadow: var(${Notification.CSS_VAR_PREFIX}shadow, 0 4px 12px rgba(0, 0, 0, 0.15));
        color: var(${Notification.CSS_VAR_PREFIX}color, #fff);
        font-family: var(${Notification.CSS_VAR_PREFIX}font-family, inherit);
        font-size: var(${Notification.CSS_VAR_PREFIX}font-size, 14px);
        line-height: var(${Notification.CSS_VAR_PREFIX}line-height, 1.5);
        opacity: 0;
        transform: translateY(100%);
        transition: transform 0.3s ease, opacity 0.3s ease;
        pointer-events: auto; /* Make the notification clickable */
        max-width: 100%;
        box-sizing: border-box;
        width: 100%;
        overflow: hidden;
        
        /* Progress bar at the bottom */
        &::after {
          content: '';
          position: absolute;
          bottom: 0;
          left: 0;
          height: var(${Notification.CSS_VAR_PREFIX}progress-height, 3px);
          background-color: var(${Notification.CSS_VAR_PREFIX}progress-color, rgba(255, 255, 255, 0.5));
          width: 100%;
          transform-origin: left;
          transform: scaleX(0);
        }
      }
      
      /* Visible notification */
      .${Notification.BASE_NOTIFICATION_CLASS}--visible {
        opacity: 1;
        transform: translateY(0);
      }
      
      /* Animation for progress bar */
      .${Notification.BASE_NOTIFICATION_CLASS}--with-progress::after {
        animation-name: ${Notification.BASE_NOTIFICATION_CLASS}-progress;
        animation-timing-function: linear;
        animation-fill-mode: forwards;
      }
      
      @keyframes ${Notification.BASE_NOTIFICATION_CLASS}-progress {
        from { transform: scaleX(1); }
        to { transform: scaleX(0); }
      }
      
      /* Close button */
      .${Notification.BASE_NOTIFICATION_CLASS}-close {
        background: none;
        border: none;
        color: inherit;
        opacity: 0.7;
        font-size: 18px;
        cursor: pointer;
        padding: 4px;
        margin-left: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: opacity 0.2s ease;
      }
      
      .${Notification.BASE_NOTIFICATION_CLASS}-close:hover {
        opacity: 1;
      }
      
      /* Icon area */
      .${Notification.BASE_NOTIFICATION_CLASS}-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 12px;
      }
      
      /* Content area */
      .${Notification.BASE_NOTIFICATION_CLASS}-content {
        flex-grow: 1;
        word-break: break-word;
      }
      
      /* Types styling */
      .${Notification.BASE_NOTIFICATION_CLASS}--info {
        background-color: var(${Notification.CSS_VAR_PREFIX}info-bg, #3498db);
      }
      
      .${Notification.BASE_NOTIFICATION_CLASS}--success {
        background-color: var(${Notification.CSS_VAR_PREFIX}success-bg, #2ecc71);
      }
      
      .${Notification.BASE_NOTIFICATION_CLASS}--warning {
        background-color: var(${Notification.CSS_VAR_PREFIX}warning-bg, #f39c12);
      }
      
      .${Notification.BASE_NOTIFICATION_CLASS}--error {
        background-color: var(${Notification.CSS_VAR_PREFIX}error-bg, #e74c3c);
      }
      
      /* Customizable style */
      .${Notification.BASE_NOTIFICATION_CLASS}--custom {
        background-color: var(${Notification.CSS_VAR_PREFIX}custom-bg, #7f8c8d);
      }
      
      /* Animation for top position variants */
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-center .${Notification.BASE_NOTIFICATION_CLASS},
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-left .${Notification.BASE_NOTIFICATION_CLASS},
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-right .${Notification.BASE_NOTIFICATION_CLASS} {
        transform: translateY(-100%);
      }
      
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-center .${Notification.BASE_NOTIFICATION_CLASS}--visible,
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-left .${Notification.BASE_NOTIFICATION_CLASS}--visible,
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-right .${Notification.BASE_NOTIFICATION_CLASS}--visible {
        transform: translateY(0);
      }
      
      /* Give slightly different vertical spacing based on position */
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-center,
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-left,
      .${Notification.BASE_NOTIFICATION_CLASS}-container--top-right {
        flex-direction: column;
      }
      
      .${Notification.BASE_NOTIFICATION_CLASS}-container--bottom-center,
      .${Notification.BASE_NOTIFICATION_CLASS}-container--bottom-left,
      .${Notification.BASE_NOTIFICATION_CLASS}-container--bottom-right {
        flex-direction: column-reverse;
      }
      
      /* For reduced motion preferences */
      @media (prefers-reduced-motion: reduce) {
        .${Notification.BASE_NOTIFICATION_CLASS} {
          transition: opacity 0.1s ease;
          transform: translateY(0);
        }
        
        .${Notification.BASE_NOTIFICATION_CLASS}--with-progress::after {
          animation: none;
        }
      }
    `, 'userscripts-notification-styles');

            Notification.stylesInitialized = true;
        }

        /**
         * Injects default color variables for the notification component into the :root.
         * Users can call this method to automatically set a default color palette.
         */
        static useDefaultColors() {
            const styleId = 'userscripts-notification-default-colors';
            if (!document.getElementById(styleId)) {
                const style = document.createElement('style');
                style.id = styleId;
                style.innerHTML = `
        :root {
          /* Container styling */
          ${Notification.CSS_VAR_PREFIX}container-width: auto;
          ${Notification.CSS_VAR_PREFIX}container-max-width: 350px;
          ${Notification.CSS_VAR_PREFIX}container-bottom: 16px;
          ${Notification.CSS_VAR_PREFIX}container-top: 16px;
          ${Notification.CSS_VAR_PREFIX}container-left: 16px;
          ${Notification.CSS_VAR_PREFIX}container-right: 16px;
          
          /* Toast styling */
          ${Notification.CSS_VAR_PREFIX}font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
          ${Notification.CSS_VAR_PREFIX}font-size: 14px;
          ${Notification.CSS_VAR_PREFIX}line-height: 1.5;
          ${Notification.CSS_VAR_PREFIX}padding: 12px 16px;
          ${Notification.CSS_VAR_PREFIX}border-radius: 6px;
          ${Notification.CSS_VAR_PREFIX}shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          ${Notification.CSS_VAR_PREFIX}color: #ffffff;
          
          /* Progress bar */
          ${Notification.CSS_VAR_PREFIX}progress-height: 3px;
          ${Notification.CSS_VAR_PREFIX}progress-color: rgba(255, 255, 255, 0.5);
          
          /* Toast types */
          ${Notification.CSS_VAR_PREFIX}info-bg: #3498db;
          ${Notification.CSS_VAR_PREFIX}success-bg: #2ecc71;
          ${Notification.CSS_VAR_PREFIX}warning-bg: #f39c12;
          ${Notification.CSS_VAR_PREFIX}error-bg: #e74c3c;
          ${Notification.CSS_VAR_PREFIX}custom-bg: #7f8c8d;
        }
      `;
                document.head.appendChild(style);
            }
        }

        /**
         * Creates and shows a notification.
         * @param {Object|string} options - Configuration options or message string
         * @param {string} [options.message] - The notification message
         * @param {string} [options.type='info'] - Notification type (info, success, warning, error, custom)
         * @param {number} [options.duration=3000] - How long to show the notification (ms)
         * @param {string} [options.position='bottom-center'] - Position (bottom-center, top-center, top-left, top-right, bottom-left, bottom-right)
         * @param {boolean} [options.showProgress=true] - Show progress bar
         * @param {boolean} [options.showClose=true] - Show close button
         * @param {Function} [options.onClick] - Callback when notification is clicked
         * @param {Function} [options.onClose] - Callback when notification closes
         * @param {string} [options.icon] - HTML for icon to display
         * @param {string} [options.className] - Additional CSS class
         * @param {boolean} [options.html=false] - Whether to interpret message as HTML
         * @param {Object} [options.style] - Custom inline styles for the notification
         * @return {string} ID of the created notification (can be used to close it)
         */
        static show(options) {
            // Initialize styles if not already done
            this.initStyles();

            // Allow passing just a message string
            if (typeof options === 'string') {
                options = {message: options};
            }

            // Set defaults
            const config = {
                message: '',
                type: 'info',
                duration: 3000,
                position: 'bottom-center',
                showProgress: true,
                showClose: true,
                onClick: null,
                onClose: null,
                icon: null,
                className: '',
                html: false,
                style: null,
                ...options
            };

            // Generate a unique ID for this notification
            const id = `${Notification.BASE_NOTIFICATION_CLASS}-${++this._idCounter}`;

            // Check if we're at the limit for the specified position
            const positionString = this._normalizePosition(config.position);
            const activeInPosition = this._activeNotifications.filter(n => n.position === positionString).length;

            // If we're at the limit, queue this notification
            if (activeInPosition >= this._maxNotificationsPerContainer) {
                this._queue.push({id, ...config});
                return id;
            }

            // Create and show the notification
            this._createNotification(id, config);
            return id;
        }

        /**
         * Convenience method to show an info notification
         * @param {string} message - The message to display
         * @param {Object} [options] - Additional options
         * @return {string} Notification ID
         */
        static info(message, options = {}) {
            return this.show({...options, message, type: 'info'});
        }

        /**
         * Convenience method to show a success notification
         * @param {string} message - The message to display
         * @param {Object} [options] - Additional options
         * @return {string} Notification ID
         */
        static success(message, options = {}) {
            return this.show({...options, message, type: 'success'});
        }

        /**
         * Convenience method to show a warning notification
         * @param {string} message - The message to display
         * @param {Object} [options] - Additional options
         * @return {string} Notification ID
         */
        static warning(message, options = {}) {
            return this.show({...options, message, type: 'warning'});
        }

        /**
         * Convenience method to show an error notification
         * @param {string} message - The message to display
         * @param {Object} [options] - Additional options
         * @return {string} Notification ID
         */
        static error(message, options = {}) {
            return this.show({...options, message, type: 'error'});
        }

        /**
         * Close a notification by ID
         * @param {string} id - The notification ID
         * @param {boolean} [animate=true] - Whether to animate the closing
         */
        static close(id, animate = true) {
            const element = document.getElementById(id);
            if (!element) {
                // Check if it's in the queue
                const queueIndex = this._queue.findIndex(n => n.id === id);
                if (queueIndex !== -1) {
                    this._queue.splice(queueIndex, 1);
                }
                return;
            }

            // Get the notification object
            const notificationIndex = this._activeNotifications.findIndex(n => n.id === id);
            if (notificationIndex === -1) return;

            const notification = this._activeNotifications[notificationIndex];

            // Remove from active notifications
            this._activeNotifications.splice(notificationIndex, 1);

            // If animated, fade out then remove
            if (animate) {
                element.classList.remove(`${Notification.BASE_NOTIFICATION_CLASS}--visible`);
                setTimeout(() => {
                    this._removeNotificationElement(element, notification);
                }, 300); // Match the transition time in CSS
            } else {
                this._removeNotificationElement(element, notification);
            }

            // Process the queue after removing
            this._processQueue(notification.position);
        }

        /**
         * Close all notifications
         * @param {string} [position] - Only close notifications in this position
         * @param {boolean} [animate=true] - Whether to animate the closing
         */
        static closeAll(position = null, animate = true) {
            // Clear the queue
            if (position) {
                const normalizedPosition = this._normalizePosition(position);
                this._queue = this._queue.filter(n => this._normalizePosition(n.position) !== normalizedPosition);
            } else {
                this._queue = [];
            }

            // Close active notifications
            const notificationsToClose = position
                ? this._activeNotifications.filter(n => n.position === this._normalizePosition(position))
                : [...this._activeNotifications];

            notificationsToClose.forEach(notification => {
                this.close(notification.id, animate);
            });
        }

        /**
         * Set the maximum number of notifications to show per container
         * @param {number} max - Maximum number of notifications
         */
        static setMaxNotifications(max) {
            if (typeof max === 'number' && max > 0) {
                this._maxNotificationsPerContainer = max;
            }
        }

        /**
         * Get a container element for a specific position, creating it if it doesn't exist
         * @param {string} position - The notification position
         * @return {HTMLElement} The container element
         * @private
         */
        static _getContainer(position) {
            const positionString = this._normalizePosition(position);

            if (this._containers[positionString]) {
                return this._containers[positionString];
            }

            // Create new container
            const container = document.createElement('div');
            container.className = `${Notification.BASE_NOTIFICATION_CLASS}-container ${Notification.BASE_NOTIFICATION_CLASS}-container--${positionString}`;
            document.body.appendChild(container);

            // Store for future use
            this._containers[positionString] = container;
            return container;
        }

        /**
         * Normalize position string to one of the supported values
         * @param {string} position - Position string
         * @return {string} Normalized position string
         * @private
         */
        static _normalizePosition(position) {
            const validPositions = [
                'top-center', 'top-left', 'top-right',
                'bottom-center', 'bottom-left', 'bottom-right'
            ];

            if (validPositions.includes(position)) {
                return position;
            }

            // Handle abbreviated positions
            if (position === 'top') return 'top-center';
            if (position === 'bottom') return 'bottom-center';

            // Default
            return 'bottom-center';
        }

        /**
         * Create and show a notification
         * @param {string} id - The notification ID
         * @param {Object} config - Notification configuration
         * @private
         */
        static _createNotification(id, config) {
            const position = this._normalizePosition(config.position);
            const container = this._getContainer(position);

            // Create the notification element
            const element = document.createElement('div');
            element.id = id;
            element.className = `${Notification.BASE_NOTIFICATION_CLASS} ${Notification.BASE_NOTIFICATION_CLASS}--${config.type}`;

            if (config.showProgress && config.duration > 0) {
                element.classList.add(`${Notification.BASE_NOTIFICATION_CLASS}--with-progress`);
                // Set the animation duration for the progress bar
                element.style.setProperty('--progress-duration', `${config.duration}ms`);
            }

            if (config.className) {
                element.classList.add(config.className);
            }

            // Apply custom styles
            if (config.style && typeof config.style === 'object') {
                Object.assign(element.style, config.style);
            }

            // Create content structure
            let content = '';

            // Add icon if provided
            if (config.icon) {
                content += `<div class="${Notification.BASE_NOTIFICATION_CLASS}-icon">${config.icon}</div>`;
            }

            // Add message
            content += `<div class="${Notification.BASE_NOTIFICATION_CLASS}-content">`;
            if (config.html) {
                content += config.message;
            } else {
                const message = document.createTextNode(config.message);
                const tempDiv = document.createElement('div');
                tempDiv.appendChild(message);
                content += tempDiv.innerHTML;
            }
            content += '</div>';

            // Add close button if needed
            if (config.showClose) {
                content += `<button class="${Notification.BASE_NOTIFICATION_CLASS}-close" aria-label="Close notification">×</button>`;
            }

            element.innerHTML = content;

            // Set up animations
            requestAnimationFrame(() => {
                container.appendChild(element);

                // Trigger layout/reflow before adding the visible class
                void element.offsetWidth;

                // Make visible
                element.classList.add(`${Notification.BASE_NOTIFICATION_CLASS}--visible`);

                // Set animation for progress bar if applicable
                const progressBar = element.querySelector(`.${Notification.BASE_NOTIFICATION_CLASS}--with-progress::after`);
                if (progressBar) {
                    progressBar.style.animationDuration = `${config.duration}ms`;
                }
            });

            // Add to active notifications
            this._activeNotifications.push({
                id,
                element,
                position,
                config
            });

            // Set up click handler
            if (config.onClick) {
                element.addEventListener('click', event => {
                    // Only trigger if not clicking the close button
                    if (!event.target.closest(`.${Notification.BASE_NOTIFICATION_CLASS}-close`)) {
                        config.onClick(event, id);
                    }
                });
            }

            // Set up close button handler
            const closeButton = element.querySelector(`.${Notification.BASE_NOTIFICATION_CLASS}-close`);
            if (closeButton) {
                closeButton.addEventListener('click', () => this.close(id, true));
            }

            // Set auto-close timeout if duration > 0
            if (config.duration > 0) {
                setTimeout(() => {
                    // Check if notification still exists before closing
                    if (document.getElementById(id)) {
                        this.close(id, true);
                    }
                }, config.duration);
            }
        }

        /**
         * Remove a notification element from the DOM
         * @param {HTMLElement} element - The notification element
         * @param {Object} notification - The notification object
         * @private
         */
        static _removeNotificationElement(element, notification) {
            if (!element) return;

            // Call onClose callback if provided
            if (notification && notification.config && notification.config.onClose) {
                try {
                    notification.config.onClose(notification.id);
                } catch (e) {
                    Logger.error(e, 'Error in notification onClose callback');
                }
            }

            // Remove the element
            if (element.parentNode) {
                element.parentNode.removeChild(element);
            }

            // Check if container is empty and remove it if so
            const container = this._containers[notification.position];
            if (container && !container.hasChildNodes()) {
                if (container.parentNode) {
                    container.parentNode.removeChild(container);
                }
                delete this._containers[notification.position];
            }
        }

        /**
         * Process the notification queue for a specific position
         * @param {string} position - Position to process
         * @private
         */
        static _processQueue(position) {
            const normalizedPosition = this._normalizePosition(position);

            // Check how many active notifications we have in this position
            const activeCount = this._activeNotifications.filter(n => n.position === normalizedPosition).length;

            // Check if we can show more
            if (activeCount >= this._maxNotificationsPerContainer) return;

            // Find the first queued notification for this position
            const queueIndex = this._queue.findIndex(n =>
                this._normalizePosition(n.position) === normalizedPosition
            );

            if (queueIndex !== -1) {
                // Remove from queue and show
                const nextNotification = this._queue.splice(queueIndex, 1)[0];
                this._createNotification(nextNotification.id, nextNotification);
            }
        }
    }

    // Static property to track if styles have been initialized
    Notification.stylesInitialized = false;

    // Import core components

    // Configure logger
    Logger.setPrefix("Google AI Studio Enhancer");
    Logger.DEBUG = true;

    /**
     * Google AI Studio Enhancer
     * Provides response copying and auto-run functionality for Google AI Studio
     */
    class AIStudioEnhancer {
        // Configuration
        static SELECTORS = {
            // Common selectors for AI responses
            RESPONSE_CONTAINERS: [
                '[data-test-id="response-text"]',
                '.model-response',
                '.response-content',
                '[role="text"]',
                '.markdown-content',
                'div[data-message-author-role="model"]',
                'div[data-message-role="model"]',
                '[data-message-author-role="assistant"]'
            ],
            // Common selectors for run buttons
            RUN_BUTTONS: [
                'button[aria-label*="Run"]',
                'button[title*="Run"]',
                '[data-test-id="run-button"]',
                '.run-button',
                'button[data-testid*="run"]',
                'button[aria-label*="Send"]',
                'button[title*="Send"]',
                'button[data-testid*="send"]'
            ],
            // Loading indicators
            LOADING_INDICATORS: [
                '.loading',
                '.spinner',
                '[data-test-id="loading"]',
                '.generating',
                '.thinking',
                '[aria-label*="loading"]',
                '[aria-label*="thinking"]'
            ]
        };

        static SETTINGS_KEYS = {
            AUTO_COPY_RESPONSES: 'gaise-auto-copy-responses',
            DEFAULT_ITERATIONS: 'gaise-default-iterations',
            AUTO_RUN_DELAY: 'gaise-auto-run-delay',
            SHOW_NOTIFICATIONS: 'gaise-show-notifications',
            PANEL_POSITION: 'gaise-panel-position'
        };

        static DEFAULT_SETTINGS = {
            AUTO_COPY_RESPONSES: false,
            DEFAULT_ITERATIONS: 10,
            AUTO_RUN_DELAY: 2000,
            SHOW_NOTIFICATIONS: true,
            PANEL_POSITION: { x: 20, y: 20 }
        };

        /**
         * Initialize the enhancer
         */
        constructor() {
            this.responses = [];
            this.isAutoRunning = false;
            this.currentIteration = 0;
            this.maxIterations = 0;
            this.responseObserver = null;
            this.settings = { ...AIStudioEnhancer.DEFAULT_SETTINGS };
            this.panel = null;

            Logger.info("Initializing Google AI Studio Enhancer");

            // Load saved settings
            this.loadSettings().then(() => {
                // Initialize components
                this.init();
            });
        }

        /**
         * Load saved settings from GM storage
         */
        async loadSettings() {
            try {
                for (const [settingName, storageKey] of Object.entries(AIStudioEnhancer.SETTINGS_KEYS)) {
                    const savedValue = await getValue(storageKey, null);
                    if (savedValue !== null) {
                        this.settings[settingName] = savedValue;
                    }
                }
                Logger.debug("Settings loaded", this.settings);
            } catch (error) {
                Logger.error("Error loading settings:", error);
            }
        }

        /**
         * Save settings to GM storage
         */
        async saveSettings() {
            try {
                for (const [settingName, storageKey] of Object.entries(AIStudioEnhancer.SETTINGS_KEYS)) {
                    await setValue(storageKey, this.settings[settingName]);
                }
                Logger.debug("Settings saved", this.settings);
            } catch (error) {
                Logger.error("Error saving settings:", error);
            }
        }

        /**
         * Initialize the enhancer
         */
        async init() {
            // Wait for page to be ready
            await this.waitForPageReady();

            // Create the UI panel
            this.createPanel();

            // Setup response monitoring
            this.setupResponseMonitoring();

            // Collect existing responses
            this.collectExistingResponses();

            Logger.success("Google AI Studio Enhancer initialized successfully!");
        }

        /**
         * Wait for the page to be ready
         */
        waitForPageReady() {
            return new Promise((resolve) => {
                if (document.readyState === 'complete') {
                    setTimeout(resolve, 1000);
                } else {
                    window.addEventListener('load', () => {
                        setTimeout(resolve, 1000);
                    });
                }
            });
        }

        /**
         * Create the main UI panel
         */
        createPanel() {
            this.panel = new SidebarPanel({
                title: '🤖 AI Studio Enhancer',
                position: this.settings.PANEL_POSITION,
                draggable: true,
                collapsible: true,
                width: 320,
                onPositionChange: (position) => {
                    this.settings.PANEL_POSITION = position;
                    this.saveSettings();
                }
            });

            this.createResponseSection();
            this.createAutoRunSection();
            this.createSettingsSection();

            this.panel.show();
        }

        /**
         * Create the response management section
         */
        createResponseSection() {
            const section = this.panel.addSection('📋 Response Management');

            // Response counter
            this.responseCountElement = HTMLUtils.createElement('div', {
                className: 'response-counter',
                textContent: `Responses collected: ${this.responses.length}`
            });
            section.appendChild(this.responseCountElement);

            // Copy all responses button
            const copyButton = new Button({
                text: 'Copy All Responses',
                icon: '📋',
                onClick: () => this.copyAllResponses(),
                variant: 'primary',
                fullWidth: true
            });
            section.appendChild(copyButton.element);

            // Clear responses button
            const clearButton = new Button({
                text: 'Clear Response History',
                icon: '🗑️',
                onClick: () => this.clearResponses(),
                variant: 'secondary',
                fullWidth: true
            });
            section.appendChild(clearButton.element);
        }

        /**
         * Create the auto-run section
         */
        createAutoRunSection() {
            const section = this.panel.addSection('🔄 Auto Runner');

            // Iterations input
            this.iterationsInput = HTMLUtils.createElement('input', {
                type: 'number',
                min: 1,
                max: 100,
                value: this.settings.DEFAULT_ITERATIONS,
                placeholder: 'Number of iterations',
                style: { width: '100%', marginBottom: '10px', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }
            });
            section.appendChild(this.iterationsInput);

            // Button container
            const buttonContainer = HTMLUtils.createElement('div', {
                style: { display: 'flex', gap: '10px', marginBottom: '10px' }
            });

            // Start button
            this.startButton = new Button({
                text: 'Start Auto Run',
                icon: '▶️',
                onClick: () => this.startAutoRun(),
                variant: 'primary'
            });
            buttonContainer.appendChild(this.startButton.element);

            // Stop button
            this.stopButton = new Button({
                text: 'Stop',
                icon: '⏹️',
                onClick: () => this.stopAutoRun(),
                variant: 'danger',
                disabled: true
            });
            buttonContainer.appendChild(this.stopButton.element);

            section.appendChild(buttonContainer);

            // Status display
            this.statusElement = HTMLUtils.createElement('div', {
                className: 'auto-run-status',
                textContent: 'Ready to start',
                style: { fontSize: '12px', color: '#666', textAlign: 'center' }
            });
            section.appendChild(this.statusElement);
        }

        /**
         * Create the settings section
         */
        createSettingsSection() {
            const section = this.panel.addSection('⚙️ Settings');

            // Auto-copy responses setting
            const autoCopyCheckbox = new Checkbox({
                label: 'Auto-copy new responses',
                checked: this.settings.AUTO_COPY_RESPONSES,
                onChange: (checked) => {
                    this.settings.AUTO_COPY_RESPONSES = checked;
                    this.saveSettings();
                }
            });
            section.appendChild(autoCopyCheckbox.element);

            // Show notifications setting
            const notificationsCheckbox = new Checkbox({
                label: 'Show notifications',
                checked: this.settings.SHOW_NOTIFICATIONS,
                onChange: (checked) => {
                    this.settings.SHOW_NOTIFICATIONS = checked;
                    this.saveSettings();
                }
            });
            section.appendChild(notificationsCheckbox.element);
        }

        /**
         * Setup response monitoring using DOM observer
         */
        setupResponseMonitoring() {
            this.responseObserver = new DOMObserver((mutations) => {
                this.handleDOMChanges(mutations);
            });

            this.responseObserver.observe(document.body, {
                childList: true,
                subtree: true
            });

            Logger.debug("Response monitoring setup complete");
        }

        /**
         * Handle DOM changes to detect new responses
         */
        handleDOMChanges(mutations) {
            for (const mutation of mutations) {
                if (mutation.type === 'childList') {
                    for (const node of mutation.addedNodes) {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            this.scanForNewResponses(node);
                        }
                    }
                }
            }
        }

        /**
         * Scan element for new AI responses
         */
        scanForNewResponses(element) {
            AIStudioEnhancer.SELECTORS.RESPONSE_CONTAINERS.forEach(selector => {
                // Check if the element itself matches
                if (element.matches && element.matches(selector)) {
                    this.addResponse(element);
                }
                // Check children
                if (element.querySelectorAll) {
                    element.querySelectorAll(selector).forEach(el => {
                        this.addResponse(el);
                    });
                }
            });
        }

        /**
         * Collect existing responses on page
         */
        collectExistingResponses() {
            AIStudioEnhancer.SELECTORS.RESPONSE_CONTAINERS.forEach(selector => {
                document.querySelectorAll(selector).forEach(element => {
                    this.addResponse(element);
                });
            });

            Logger.info(`Collected ${this.responses.length} existing responses`);
            this.updateResponseCount();
        }

        /**
         * Add a response to the collection
         */
        addResponse(element) {
            const text = element.innerText?.trim();
            if (text && text.length > 10 && !this.responses.includes(text)) {
                this.responses.push(text);
                this.updateResponseCount();
                
                if (this.settings.AUTO_COPY_RESPONSES) {
                    this.copyAllResponses();
                }

                Logger.debug('New response added:', text.substring(0, 100) + '...');
            }
        }

        /**
         * Update response counter display
         */
        updateResponseCount() {
            if (this.responseCountElement) {
                this.responseCountElement.textContent = `Responses collected: ${this.responses.length}`;
            }
        }

        /**
         * Copy all responses to clipboard
         */
        async copyAllResponses() {
            if (this.responses.length === 0) {
                this.showNotification('No responses found to copy', 'warning');
                return false;
            }

            const content = this.responses.map((response, index) => {
                return `=== Response ${index + 1} ===\n${response}\n`;
            }).join('\n');

            try {
                GM_setClipboard(content);
                this.showNotification(`Copied ${this.responses.length} responses to clipboard`, 'success');
                Logger.success(`Copied ${this.responses.length} responses to clipboard`);
                return true;
            } catch (error) {
                this.showNotification('Failed to copy responses', 'error');
                Logger.error('Failed to copy responses:', error);
                return false;
            }
        }

        /**
         * Clear all collected responses
         */
        clearResponses() {
            this.responses = [];
            this.updateResponseCount();
            this.showNotification('Response history cleared', 'info');
            Logger.info('Response history cleared');
        }

        /**
         * Start auto-run process
         */
        async startAutoRun() {
            if (this.isAutoRunning) {
                this.showNotification('Auto runner is already running', 'warning');
                return false;
            }

            const iterations = parseInt(this.iterationsInput.value, 10);
            if (isNaN(iterations) || iterations <= 0) {
                this.showNotification('Please enter a valid number of iterations', 'error');
                return false;
            }

            this.isAutoRunning = true;
            this.currentIteration = 0;
            this.maxIterations = iterations;

            // Update UI
            this.startButton.setDisabled(true);
            this.stopButton.setDisabled(false);
            this.updateAutoRunStatus();

            this.showNotification(`Starting auto runner for ${iterations} iterations`, 'info');
            Logger.info(`Starting auto runner for ${iterations} iterations`);

            await this.runIteration();
            return true;
        }

        /**
         * Stop auto-run process
         */
        stopAutoRun() {
            this.isAutoRunning = false;
            
            // Update UI
            this.startButton.setDisabled(false);
            this.stopButton.setDisabled(true);
            this.updateAutoRunStatus();

            this.showNotification(`Auto runner stopped at ${this.currentIteration}/${this.maxIterations}`, 'info');
            Logger.info(`Auto runner stopped. Completed ${this.currentIteration}/${this.maxIterations} iterations`);
        }

        /**
         * Run a single iteration
         */
        async runIteration() {
            if (!this.isAutoRunning || this.currentIteration >= this.maxIterations) {
                this.stopAutoRun();
                return;
            }

            this.currentIteration++;
            this.updateAutoRunStatus();
            Logger.info(`Running iteration ${this.currentIteration}/${this.maxIterations}`);

            const runButton = this.findRunButton();
            if (!runButton) {
                this.showNotification('Run button not found', 'error');
                this.stopAutoRun();
                return;
            }

            // Click the run button
            runButton.click();
            Logger.debug('Run button clicked');

            // Wait for response completion
            await this.waitForResponseCompletion();

            // Wait before next iteration
            setTimeout(() => {
                this.runIteration();
            }, this.settings.AUTO_RUN_DELAY);
        }

        /**
         * Find the run button on the page
         */
        findRunButton() {
            // Try specific selectors first
            for (const selector of AIStudioEnhancer.SELECTORS.RUN_BUTTONS) {
                const button = document.querySelector(selector);
                if (button && !button.disabled) {
                    return button;
                }
            }

            // Fallback: search by text content
            const buttons = document.querySelectorAll('button');
            for (const button of buttons) {
                const text = button.textContent?.toLowerCase().trim();
                if ((text === 'run' || text === 'send' || text.includes('run') || text.includes('send')) && !button.disabled) {
                    return button;
                }
            }

            return null;
        }

        /**
         * Wait for response completion
         */
        async waitForResponseCompletion() {
            return new Promise((resolve) => {
                let checks = 0;
                const maxChecks = 120; // 2 minutes timeout

                const checkCompletion = () => {
                    checks++;

                    // Check for loading indicators
                    const isLoading = AIStudioEnhancer.SELECTORS.LOADING_INDICATORS.some(selector =>
                        document.querySelector(selector) !== null
                    );

                    // Check if run button is disabled
                    const runButton = this.findRunButton();
                    const isProcessing = runButton?.disabled;

                    if (!isLoading && !isProcessing) {
                        Logger.debug('Response completion detected');
                        resolve();
                        return;
                    }

                    if (checks >= maxChecks) {
                        Logger.warn('Response completion timeout');
                        resolve();
                        return;
                    }

                    setTimeout(checkCompletion, 1000);
                };

                setTimeout(checkCompletion, 2000); // Initial delay
            });
        }

        /**
         * Update auto-run status display
         */
        updateAutoRunStatus() {
            if (this.statusElement) {
                if (this.isAutoRunning) {
                    this.statusElement.textContent = `Running: ${this.currentIteration}/${this.maxIterations}`;
                } else {
                    if (this.currentIteration > 0) {
                        this.statusElement.textContent = `Completed: ${this.currentIteration}/${this.maxIterations}`;
                    } else {
                        this.statusElement.textContent = 'Ready to start';
                    }
                }
            }
        }

        /**
         * Show notification if enabled
         */
        showNotification(message, type = 'info') {
            if (this.settings.SHOW_NOTIFICATIONS) {
                Notification.show(message, {
                    type: type,
                    duration: 3000,
                    position: 'top-right'
                });
            }
        }
    }

    /**
     * Initialize the enhancer when the page is ready
     */
    function init() {
        Logger.info("Starting Google AI Studio Enhancer initialization");
        
        // Check if we're on the correct page
        if (window.location.hostname !== 'aistudio.google.com') {
            Logger.warn("Not on Google AI Studio, script will not run");
            return;
        }

        new AIStudioEnhancer();
    }

    // Start initialization
    init();

})();
